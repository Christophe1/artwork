%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(r) 6.0.1%%For: (Lorcan) (  )%%Title: (New Cd 8 \(O\))%%CreationDate: (14/12/01) (3:01 pm)%%BoundingBox: 94 276 496 678%%HiResBoundingBox: 94.1042 276.1875 495.4375 677.5417%%DocumentProcessColors: Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_Illustrator_AI6_vars Adobe_Illustrator_AI6%%+ procset Adobe_Illustrator_AI5 1.0 0%AI5_FileFormat 2.1%AI3_ColorUsage: Color%%DocumentCustomColors: (PANTONE 376 CV)%%CMYKCustomColor: 1 0 0.55 0 (Aqua)%%+ 1 0.5 0 0 (Blue)%%+ 0 0.7 1 0 (Orange Red)%%+ 0 0 0.51 0 (PANTONE 100 CV)%%+ 0 0 1 0.18 (PANTONE 103 CV)%%+ 0 0.09 0.79 0 (PANTONE 115 CV)%%+ 0 0.34 0.91 0 (PANTONE 137 CV)%%+ 0 0.43 0.87 0 (PANTONE 151 CV)%%+ 0.56 0 1 0 (PANTONE 376 CV)%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set)%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 ()%AI3_TemplateBox: 306 396 306 396%AI3_TileBox: 30 31 582 761%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 612 792%AI5_RulerUnits: 1%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -318 780 -2 634 437 58 1 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog% ------------------------------------------------------%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)% ------------------------------------------------------userdict /Adobe_level2_AI5 23 dict dup begin	put% use packed arrays immediately	% packedarray emulation	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def		end		0	} if	pop% activate packing now	userdict /defaultpacking currentpacking put true setpacking% initialize, terminate	% note : no binding loop needed here by design	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{			end		} if	} bind def% mark for later stack clean-up	mark% custom color business	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}	% don't bind 'setcmykcolor in this procedure		def	} if%	new version checks for non-numeric version strings (5.0.1 fix bh 10/25/93)%	/gt38? {version cvx exec} stopped {pop true} {38 gt} ifelse def	%	newer version handles errors on clones with cvx or exec which would leave junk on the stack%	(bh 12/2/93)	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put% test for Level 2 availability	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq		%	halftoneDict level2ScreenFreq screenFreq{	begin		60	% 60 lpi is default		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if	end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		% LEVEL 1+ EMULATIONS (typesetter/color printer extensions)		% cmyk => gray conversion emulation		% note this revision approved by Ed Taft		% for correcting the out of gamut problem		% in our current emulations		% don't bind these guys so 'setgray/currentgray can be overloaded		/setcmykcolor where not		{			% see red book II, pp. 305			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		% LEVEL 2 EMULATIONS		% setoverprint emulation		/setoverprint where not		{			/setoverprint /pop load def		} if		% selectfont emulation		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		% cshow emulation		/cshow where not		{			% {proc} (string)			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if% clean up	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put% *** other separation state tests if we're not on a composite page		composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def		end	} if	end defaultpacking setpacking%%EndResource% ------------------------------------------------------%%BeginProcSet: Adobe_ColorImage_AI6 1.0 0% ColorImage Emulation and Separation Code for Grayscale, RGB and CMYK images% Version 1.0 12/25/95% Copyright (C) 1995-96% Adobe Systems Incorporated% All Rights Reserved% ------------------------------------------------------userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 17 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin% ------------------------------------------------------% Routine Overview% %	String Iterators%		WalkRGBString (given a single source string, convert each pixel to cmyk and call a proc)%		WalkCMYKString (given a single source string, get the components and call a proc)% %	Level1 Emulator Routines%		StuffRGBIntoGrayString%		RGBToGrayImageProc%		StuffCMYKIntoGrayString %		CMYKToGrayImageProc %		ColorImageCompositeEmulator % %	ColorImage CMYK Separation Hacks (For [Applications] that only support planar images)%		CMYKToSeparatedCMYKImageProc% %	ColorImage and Utility Routines.%		FourEqual%		TestPlateIndex%		colorimage% % ------------------------------------------------------	/initialize{ 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6	{		dup type /arraytype eq		{			dup xcheck			{				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not{	/Adobe_ColorImage_AI6_Vars 14 dict def} ifAdobe_ColorImage_AI6_Vars begin	/channelcount 0 def	/sourcecount 0 def	/sourcearray 4 array def	/plateindex -1 def	/XIMask 0 def	/XIBinary 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIBuffer null def	/XIDataProc null defend/WalkRGBString null def/WalkCMYKString null def/StuffRGBIntoGrayString null def/RGBToGrayImageProc null def/StuffCMYKIntoGrayString null def/CMYKToGrayImageProc null def/ColorImageCompositeEmulator null def/SeparateCMYKImageProc null def/FourEqual null def/TestPlateIndex null def% define _colorimage if it doesn't already existcurrentdict /_colorimage known not{	/colorimage where	{		% sourcedictionary (systemdict or a separation proc redefinition)		/colorimage get /_colorimage exch def	}	{		/_colorimage null def	} ifelse} if/_currenttransfer systemdict /currenttransfer get def/colorimage null def/XI null def% ------------------------------------------------------% rgb proc out --WalkRGBString--% ------------------------------------------------------/WalkRGBString{	% rgb proc out	0 3 index	% rgb proc out outindex rgb	dup length 1 sub 0 3 3 -1 roll	{		% rgb proc out outindex rgb index		3 getinterval { } forall		% call the stuff proc		% rgb proc out outindex r g b		5 index exec		% push rgb for the next loop iteration		% rgb proc out outindex		3 index		% rgb proc out outindex rgb	} for		% clean up the stack	% rgb proc out outindex rgb	 5 { pop } repeat} def% ------------------------------------------------------% cmyk proc gray --WalkCMYKString--% ------------------------------------------------------/WalkCMYKString{	% cmyk proc gray	0 3 index	% cmyk proc gray grayindex cmyk	dup length 1 sub 0 4 3 -1 roll	{		% cmyk proc gray grayindex cmyk index		4 getinterval { } forall				% cmyk proc gray grayindex c m y k		6 index exec				% cmyk proc gray grayindex		3 index				% cmyk proc gray grayindex cmyk	} for		% clean up the stack	% cmyk proc gray grayindex cmyk	5 { pop } repeat	} def% ------------------------------------------------------% gray grayindex r g b --StuffRGBIntoGrayString-- gray grayindex% ------------------------------------------------------/StuffRGBIntoGrayString{	% gray grayindex r g b	.11 mul exch		% gray grayindex r bk g	.59 mul add exch		% gray grayindex bkgk r	.3 mul add		% gray grayindex k	cvi 3 copy put		% gray grayindex k	pop 1 add} def% ------------------------------------------------------% --RGBToGrayImageProc-- string% ------------------------------------------------------/RGBToGrayImageProc{		Adobe_ColorImage_AI6_Vars begin			% call the source proc to get the chunky rgb string		sourcearray 0 get exec		% make a grayscale string of the same pixel count (ouch, pull me out of this loop)		% rgb		dup length 3 idiv string		% roll off a copy of the gray string		% rgb gray		dup 3 1 roll 				% push the stuff proc that we want called by WalkRGBString		% gray rgb gray		/StuffRGBIntoGrayString load exch		% call the rgb conversion iterator		% gray rgb proc gray		WalkRGBString		% return the gray string		% gray		end} def% ------------------------------------------------------% gray grayindex c m y k --StuffCMYKIntoGrayString-- gray grayindex% ------------------------------------------------------/StuffCMYKIntoGrayString{	% gray grayindex c m y k	exch .11 mul add		% gray grayindex c m yk	exch .59 mul add		% gray grayindex c mkyk	exch .3 mul add		% pin k to 255	% gray gray index k	dup 255 gt { pop 255 } if		% gray grayindex k	255 exch sub cvi 3 copy put		% gray grayindex k	pop 1 add} def% ------------------------------------------------------% --CMYKToGrayImageProc-- string% ------------------------------------------------------/CMYKToGrayImageProc{		Adobe_ColorImage_AI6_Vars begin		% call the source proc to get the chunky cmyk string		sourcearray 0 get exec		% make a grayscale string of the same pixel count (ouch, pull me out of this loop)		% cmyk		dup length 4 idiv string		% roll off a copy of the gray string		% cmyk gray		dup 3 1 roll 				% push the stuff proc that we want called by WalkCMYKString		% gray cmyk gray		/StuffCMYKIntoGrayString load exch		% call the cmyk iterator		% gray cmyk proc gray		WalkCMYKString		% return the gray string		% gray	end} def% ------------------------------------------------------% width height bitsperpixel matrix firstsource...lastsource multiplesources channelcount --ColorImageCompositeEmulator--% ------------------------------------------------------/ColorImageCompositeEmulator{	% Channelcount is already saved in Adobe_ColorImage_AI6_Vars. Our data is always in chunky form so punt if someone	% calls colorimage on a level 1 device with planar data.	% channelcount and multiplesources are already saved in Adobe_ColorImage_AI6_Vars. The image operator isn't going to use them.	pop true eq	{		% pop off the parameters and return		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat	}	{		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne		{			Adobe_ColorImage_AI6_Vars begin				% save off the original chunky source function				sourcearray 0 3 -1 roll put							% push the appropriate cover proc				channelcount 3 eq 				{ 					/RGBToGrayImageProc 				}				{ 					/CMYKToGrayImageProc				} ifelse				load			end		} if		image	} ifelse} def% ------------------------------------------------------% --SeparateCMYKImageProc-- string% ------------------------------------------------------/SeparateCMYKImageProc{		Adobe_ColorImage_AI6_Vars begin		sourcecount 0 ne		{			% planar case: call the source proc for the current plate and return its result			sourcearray plateindex get exec		}		{						% call the source proc to get the chunky cmyk string			sourcearray 0 get exec						% make a grayscale string of the same pixel count (ouch, pull me out of this loop)			% cmyk			dup length 4 idiv string						% cmyk			0 2 index						% cmyk gray grayindex cmyk			plateindex 4 2 index length 1 sub			{				% cmyk gray grayindex cmyk channelindex				get 255 exch sub								% cmyk gray grayindex grayvalue				3 copy put pop 1 add								% cmyk gray grayindex				2 index			} for			% return the gray string			% cmyk gray grayindex cmyk			pop pop exch pop		} ifelse	end} def	% ------------------------------------------------------% s1 s2 s3 s4 c1 c2 c3 c4 --FourEqual--% ------------------------------------------------------/FourEqual{	% s1 s2 s3 s4 c1 c2 c3 c4	4 index ne	{		pop pop pop false	}	{		% s1 s2 s3 s4 c1 c2 c3		4 index ne		{			pop pop false		}		{			% s1 s2 s3 s4 c1 c2			4 index ne			{				pop false			}			{				% s1 s2 s3 s4 c1				4 index eq			} ifelse		} ifelse	} ifelse} def% ------------------------------------------------------%  --TestPlateIndex-- plateindex% ------------------------------------------------------/TestPlateIndex{	Adobe_ColorImage_AI6_Vars begin		% assume we're not separating		/plateindex -1 def		/setcmykcolor where		{			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			% cyan plate?			1 0 0 0 FourEqual 			{ 				/plateindex 0 def			}			{				% magenta plate?				0 1 0 0 FourEqual				{ 					/plateindex 1 def				}				{					% yellow plate?					0 0 1 0 FourEqual					{						/plateindex 2 def					}					{						% black plate						0 0 0 1 FourEqual						{ 							/plateindex 3 def						}						{							0 0 0 0 FourEqual							{								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex	end} def% ------------------------------------------------------% width height bitsperpixel matrix firstsource...lastsource multiplesources channelcount --colorimage--% ------------------------------------------------------/colorimage{	Adobe_ColorImage_AI6_Vars begin		/channelcount 1 index def		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def		% setup for following if statement		4 sourcecount add index dup 		8 eq exch 1 eq or not	end		% is this not 1 or 8 bit?	{		% Call the original proc if the image is at a weird bit depth. This will display a composite if we're separating, but too bad.		/_colorimage load null ne		{			% call the original (they probably punt if we're separating)			_colorimage		}		{			% pop off the parameters and return			Adobe_ColorImage_AI6_Vars /sourcecount get			7 add { pop } repeat		} ifelse	}	{		% Call the saved colorimage operator if this an rgb, we're printing a composite or we're separating		% an image to a custom plate. The last case assumes that the separation procs surrounding us		% take care of punching out		dup 3 eq		TestPlateIndex		dup -1 eq exch 5 eq or or		{			% Call the colorimage emulator if we're printing to a level 1 device			/_colorimage load null eq			{				ColorImageCompositeEmulator			}			{				% call image if this is a grayscale so that Quark doesn't die on custom plates				dup 1 eq				{					pop pop image				}				{					% draw to the null device if we're on a custom plate					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq					{						gsave												% stolen from PhotoShop						0 _currenttransfer exec						1 _currenttransfer exec						eq						{ 0 _currenttransfer exec 0.5 lt }						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse												% push the appropriate transfer proc (first case is negative						% second case is positive) and call settransfer						{ { pop 0 } } { { pop 1 } } ifelse						systemdict /settransfer get exec					} if										_colorimage										% restore from the null device if necessary					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq					{						grestore					} if				} ifelse			} ifelse		}		{			% Are we separating a grayscale image?			dup 1 eq			{				% let the surrounding separation procset handle the separation				pop pop				image			}			{				% pop channelcount and multiplesources since they're not used by the image operator				pop pop				% Prepare to call the image operator with a cover proc				Adobe_ColorImage_AI6_Vars begin					% save off the source procs for our cover proc					% width height bitsperpixel matrix firstsource...lastsource					sourcecount -1 0					{									% width height bitsperpixel matrix firstsource...lastsource index						exch sourcearray 3 1 roll put					} for					/SeparateCMYKImageProc load				end				% bypass the separation procset since some applications don't handle chunky and the				% old separator doesn't handle colorimage				systemdict /image get exec			} ifelse		} ifelse	} ifelse} def% ------------------------------------------------------% --XI--% ------------------------------------------------------/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIMask exch 0 ne def		/XIBinary exch 0 ne def		pop		pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def				XIBitsPerPixel 1 eq		{			XIImageWidth 8 div ceiling cvi		}		{			XIImageWidth XIChannelCount mul		} ifelse		/XIBuffer exch string def				XIBinary		{			/XIDataProc { currentfile XIBuffer readstring pop } def			% skip the %BeginBinary comment			currentfile 128 string readline pop pop		}		{			/XIDataProc { currentfile XIBuffer readhexstring pop } def		} ifelse				0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				XIMask		{			XIImageWidth XIImageHeight			false			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]			/XIDataProc load						% synch the PostScript fill with Illustrator's notion of the current fill			/_lp /null ddef			_fc			/_lp /imagemask ddef						imagemask		}		{			XIImageWidth XIImageHeight			XIBitsPerPixel			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]			/XIDataProc load						% call image if passed grayscale or bitmap data. Some applications			% die if colorimage is called with gray data.			XIChannelCount 1 eq			{				% Some applications refuse to separate a grayscale image to the black plate if				% the currentgray is white. Hack around.								gsave				0 setgray								image								grestore			}			{				false				XIChannelCount				colorimage			} ifelse		} ifelse		grestore	end} def	end%%EndProcSet% ------------------------------------------------------%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)%%Version: 1.1 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)% ------------------------------------------------------currentpacking true setpacking% 71 vars, but leave slack of 10 entries for custom Postscript fragmentsuserdict /Adobe_Illustrator_AI5_vars 81 dict dup beginput% paint operands/_eo false def/_lp /none def/_pf{} def	% paint fill/_ps{} def	% paint stroke/_psf{} def	% paint string fill/_pss{} def	% paint string stroke/_pjsf{} def	% paint justified string fill/_pjss{} def	% paint justified string stroke/_pola 0 def/_doClip 0 def% paint operators/cf currentflat def	% - cf flatness% typography operands/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def	% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)/_ay 0 def	% y character spacing/_cx 0 def	% x word spacing/_cy 0 def	% y word spacing/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def% typography operators/Tx{} def/Tj{} def% compound path operators/CRender{} def% printing/_AI3_savepage{} def% color operands/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def% pattern operands/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def% discard variables (12 total)/discardSave null def	% holds save used in discard loop/buffer 256 string def	% line buffer string : assume 256 chars/line/beginString null def	% begin delimiter/endString null def	% end delimiter/endStringLength null def	% holds buffer size for reading by byte technique/layerCnt 1 def	% internal variables for discard loop/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def% variable for doing clipping without rendering/clipForward? false def% end the vars dictionaryend% =========================================userdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 91 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin% initialization/initialize	% - initialize -{	% pushing main on the stack	Adobe_Illustrator_AI5 dup begin	% push the vars dictionary	Adobe_Illustrator_AI5_vars begin	% at this point the main and vars dictionaries	% are in the state we wish them to be	% on exit from the initialize call	% bind the procedures in the discard dictionary	discardDict	{		bind pop pop	} forall	% begin the nc dictionary	dup /nc get begin	% bind the procs in main	{		% added a test for type = operatortype so procedures like Ln can be defined as an alias for 'pop		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall	% turn off 'nc	end	newpath	% on exit we have main and vars on top of dict stack} def/terminate	% - terminate -{	end	end} def% definition operators/_	% - _ nullnull def/ddef	% key value ddef -{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput	% key value literal xput -{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def	end} def/npop	% integer npop -{	{		pop	} repeat} def% marking operators/sw	% ax ay string sw x y{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj	% cx cy fillchar ax ay string swj x y{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss	% ax ay string matrix ss -{	4 1 roll	{		% matrix ax ay char 0 0 {proc} -		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss	% cx cy fillchar ax ay string matrix jss -{	4 1 roll	{		% cx cy fillchar matrix ax ay char 0 0 {proc} -   		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def% path operators/sp	% ax ay string sp -{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp	% cx cy fillchar ax ay string jsp -{	{		% cx cy fillchar ax ay char 0 0 {proc} -		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def% path construction operators/pl	% x y pl x y{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	% x1 y1 x2 y2 x3 y3 c -	{		curveto	} def	/C	/c load def	/v	% x2 y2 x3 y3 v -	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	% x1 y1 x2 y2 y -	{		2 copy curveto	} def	/Y	/y load def	/l	% x y l -	{		lineto	} def	/L	/l load def	/m	% x y m -	{		moveto	} def}{	% else	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse% graphic state operators/d	% array phase d -{	setdash} def/cf{} def	% - cf flatness/i	% flatness i -{	dup 0 eq	{		pop cf	} if	setflat} def/j	% linejoin j -{	setlinejoin} def/J	% linecap J -{	setlinecap} def/M	% miterlimit M -{	setmiterlimit} def/w	% linewidth w -{	setlinewidth} def% path painting operators/XR	% flag XR -{	0 ne	/_eo exch ddef} def/H	% - H -{} def/h	% - h -{	closepath} def/N	% - N -{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n	% - n -{	N} def/F	% - F -{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f	% - f -{	closepath	F} def/S	% - S -{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s	% - s -{	closepath	S} def/B	% - B -{	_pola 0 eq	{		_doClip 1 eq	% F clears _doClip		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b	% - b -{	closepath	B} def/W	% - W -{	/_doClip 1 ddef} def/*	% - [string] * -{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	% used to call newpath only if _polo was 0; now newpath is called unconditionally (bh 3/24/94)	newpath} def% group operators/u	% - u -{} def/U	% - U -{} def/q	% - q -{	_pola 0 eq	{		gsave	} if} def/Q	% - Q -{	_pola 0 eq	{		grestore	} if} def/*u	% - *u -{	_pola 1 add /_pola exch ddef} def/*U	% - *U -{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D	% polarized D -{	pop} def/*w	% - *w -{} def/*W	% - *W -{} def% place operators/`	% matrix llx lly urx ury string ` -{	/_i save ddef% * special case of clipping forward without rendering	% use 'nulldevice if true	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~	% - ~ -{	end	_i restore} def% color operators/O	% flag O -{	0 ne	/_of exch ddef	/_lp /none ddef} def/R	% flag R -{	0 ne	/_os exch ddef	/_lp /none ddef} def/g	% gray g -{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G	% gray G -{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k	% cyan magenta yellow black k -{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K	% cyan magenta yellow black K -{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x	% cyan magenta yellow black name gray x -{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X	% cyan magenta yellow black name gray X -{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def% locked object operator/A	% value A -{	pop} def% annotate page operator/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def% object tag operator% joe holt November 20, 1994% /name (value) XT/XT {	pop pop} def% begin layer PostScript implementation% general purpose discard loop% works on early level 1 (v.23, v.38) PostScript printers% version 0.02 04/03/93% Bill Woodruff% constraints :% if nested discards must be handled% then the begin and end delimiting% strings must be of equal length% arguments% #nestingFlag% #nestingFlag = 0  				no nesting% #nestingFlag = 1  				nesting% non-nested case% note : since the non-nested case is invoked% after the ocurrence of a beginning string% we only have to look for the ending string% it is not necessary to specify a beginning string% 0 (endString) % nested case% (beginString) 1 (endString) % the discard procedure is defined in the main dictionary% it turns the discard dictionary on to execute the discard function/discard{	% test for version, hash a key	% get and execute the discard procedure from dictionary	% execute it in a stopped context so we can bail with 'stop	% wrap it in a save so we don't have to reset variables	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop	end	discardSave restore} bind def% build the discard dictionary which will contain only proceduresuserdict /discardDict 7 dict dup beginput% pre 38 initialization/pre38Initialize{	% used as buffer size for reading by byte technique		/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	%	new buffer equal in length to end string	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	%	pointer to from 2nd to last char in new buffer	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store	%	pointer to last char in new buffer} def% for <=38	/shiftBuffer{	% shift last chars of newBuff to start of newBuff	newBuff 0 newBuffButFirst putinterval	% new character into last byte of newBuff	newBuffLast 0	currentfile read not	{	stop	} if	put} def% discard procedures% no nesting, older ps0{	pre38Initialize	mark	% fill the buffer	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def% nesting, older ps1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def% no nesting, newer ps2{	mark	{		% read a line : exit if end of file reached		currentfile buffer readline not		{		stop		} if		% end of layer ?		endString eq		{			cleartomark stop		} if	} loop} def% nesting, newer ps3{	/beginString exch store	/layerCnt 1 store	mark	{		% read a line : exit if end of file reached		currentfile buffer readline not		{		stop		} if		% start of layer ?		dup beginString eq		{			% update layer counter			pop /layerCnt dup load 1 add store		}		{			% end of layer ?			endString eq			{				% stop if we're not nested				layerCnt 1 eq				{					cleartomark stop				}				{					% nested : decrement layer counter					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} def% end discard dictionaryend% define the dictionary for clipping without renderinguserdict /clipRenderOff 15 dict dup beginput% flag for marking this dictionary as active% so we can test in /` and wrap placed% elements in nulldevice% /clipForward? true def% re-define rendering primitives to clip and newpath% based on value of /_doClip flag{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall% modify 'Tr so Tj and Tx are never set up by% the calls to 'a0, 'e0, etc./Tr /pop load def% special case of 'cshow ?% is so, we'll have to overload toplevels% /patternashow /patternawidthshow% /patternashowstroke% /patternawidthshowstroke% /ss /jss /sp /jsp% perhaps we can bracket out patterns at a higher level ?% for example, by modifying 'E to pop off its parameters% call to 'show in 'patternpath ?% calls to 'ashow in '_psf ?% calls to 'awidthshow in '_pjsf ?% calls to 'widthshow in '_jss and '_jsp ?% disable gradient operators/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} def% end dictionary for clipping without renderingend/Lb	% visible preview enabled printing dimmed masks colorIndex red green blue  ==> Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	% #masks #printing 	% assume that	% masks = 1 masks forward, masks = 0 no masking or only local masking		% do the right thing for printing and masking layer	0 eq	{		% non-printing layer		0 eq		{			% no masking forward from this layer			% nested discard call			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			% masking forward from this layer			% no printing, but clip path must survive						% set the clipForward? flag in the vars dict			/clipForward? true def						% redefine Tx and Tj in the vars dict			/Tx /pop load def			/Tj /pop load def						% turn on the no rendering dictionary			currentdict end clipRenderOff begin begin		} ifelse	}	{		% printing layer		% encapsulate layer with 'save		% only if there is no masking forward		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def% end layer :% assume that if discardSave is non-null% then the layer was bracketed by 'save...restore% else we must test for clipping forward/LB	% ==> Lb ==> .....{	discardSave dup null ne	{		% undo the save		restore	}	{		pop		clipForward?		{			% assume dictionary stack :			%		vars						%		clipRenderOff						%		main			currentdict			end			end			begin			% dictionary stack :			%		vars						%		main								/clipForward? false ddef		} if	} ifelse} bind def% begin palette discard% assume no nesting/Pb	% topLeftCell selected Pb -{	pop pop	% non nested discard	0 (%AI5_EndPalette) discard} bind def% other type of discard% assume no nesting/Np{	0 (%AI5_End_NonPrinting--) discard} bind def% express layer name/Ln /pop load def	% ==> Ln ==> .....% path center-point flag operator/Ap	% value Ap -/pop load def% device-independent flatness/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def% multi-layer clipping/Mb{	q} def/Md{} def/MB{	Q} def% null color operators/nc 3 dict defnc begin/setgray	% gray setgray -{	pop} bind def/setcmykcolor	% cyan magenta yellow black setcmykcolor -{	4 npop} bind def/setcustomcolor	% object tint setcustomcolor -{	2 npop} bind def% exit 'nc dictionarycurrentdict readonly popend% exit main dictionary% currentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetupAdobe_level2_AI5 /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_Begin_NonPrintingNp8 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 7 Bd[<D1D3D5D7D9DBDDDEE0E1E3E4E6E7E8E9EBECEDEEEFF0F0F1F2F3F4F4F5F5F6F7F7F8F8F9F9F9FAFAFBFBFBFBFCFCFCFCFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF>0 %_Br<9192939495969798999A9B9C9D9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1>0 %_Br<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291>0 %_Br<9495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>0 %_Br<82838485868788898A8B8D8E8F9091929394>0 %_Br<FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFDFDFDFDFDFCFCFCFCFCFCFCFCFCFBFBFBFBFBFBFBFAFAFAFAFAFAFAF9F9F9F9F9F8F8F8F8F8F8F7F7F7F7F7F6F6F6F6F5F5F5F5F4F4F4F4F3F3F3F3F2F2F2F2F1F1F1F0F0F0F0EFEFEFEEEEEEEDEDEDECECECEBEBEBEAEAE9E9E9E8E8E8E7E7E6E6E6E5E5E4E4E3E3E3E2E2E1E1E0E0DFDFDEDEDDDDDDDCDCDBDADAD9D9D8D8D7D7D6D6D5D5D4D3D3D2D2D1D1D0CFCFCECECDCCCCCBCACAC9C8C8C7C6C6C5C4C4C3C2C2C1C0C0BFBEBDBDBCBBBABAB9B8B7B7B6B5B4B4B3B2B1B0AFAFAEADACABAAAAA9A8A7A6A5A4A3A3A2A1A09F9E9D9C9B9A99989796969594939291908F8E8D8C8A8988878685848382>0 %_Br[1 0 50 100 %_Bs0.82 0 13 80 %_Bs0.57 0 50 57 %_Bs1 0 50 48 %_Bs0.58 0 50 40 %_Bs0.51 0 50 28 %_Bs1 0 76 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Green & Blue)(Green & Blue) 0 2 Bd[<99999A9A9B9B9B9C9C9D9D9D9E9E9F9F9FA0A0A1A1A1A2A2A3A3A3A4A4A5A5A5A6A6A7A7A7A8A8A9A9A9AAAAABABABACACADADADAEAEAFAFAFB0B0B1B1B1B2B2B3B3B3B4B4B5B5B5B6B6B7B7B7B8B8B9B9B9BABABBBBBBBCBCBDBDBDBEBEBFBFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C5C6C6C7C7C7C8C8C9C9C9CACACBCBCBCCCCCDCDCDCECECFCFCFD0D0D1D1D1D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDDDDDDDEDEDFDFDFE0E0E1E1E1E2E2E3E3E3E4E4E5E5E5E6E6E7E7E7E8E8E9E9E9EAEAEBEBEBECECEDEDEDEEEEEFEFEFF0F0F1F1F1F2F2F3F3F3F4F4F5F5F5F6F6F7F7F7F8F8F9F9F9FAFAFBFBFBFCFCFDFDFDFEFEFFFF><000102020304050506070808090A0B0B0C0D0E0E0F101111121314141516171718191A1A1B1C1D1D1E1F20202122232324252626272829292A2B2C2C2D2E2F2F303132323334353536373838393A3B3B3C3D3E3E3F404141424344444546474748494A4A4B4C4D4D4E4F50505152535354555656575859595A5B5C5C5D5E5F5F606162626364656566676868696A6B6B6C6D6E6E6F707171727374747576777778797A7A7B7C7D7D7E7F80808182828384858586878888898A8B8B8C8D8E8E8F909191929394949596979798999A9A9B9C9D9D9E9FA0A0A1A2A3A3A4A5A6A6A7A8A9A9AAABACACADAEAFAFB0B1B2B2B3B4B5B5B6B7B8B8B9BABBBBBCBDBEBEBF><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br[1 0.75 0 0 1 50 100 %_Bs0.6 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Pink, Yellow, Green)(Pink, Yellow, Green) 0 3 Bd[<0000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010202020202020202020202020202020202020202020203030303030303030303030303030303030303030304040404040404040404040404040404040404040505050505050505050505050505050505050506060606060606060606060606060606060606070707070707070707070707070707070707080808080808080808080808080808080809090909090909090909090909090909090A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D><050506060606070708080809090A0A0A0B0B0C0C0D0D0E0E0F0F101011111212131314141515161717181819191A1A1B1C1C1D1D1E1F1F202021222223232425252626272828292A2A2B2C2C2D2D2E2F2F3031313233333435353637373839393A3B3B3C3D3E3E3F4040414242434445454647474849494A4B4C4C4D4E4F4F505151525354545556575758595A5A5B5C5C5D5E5F5F606162636364656666676869696A6B6C6C6D6E6F707071727373747576777778797A7B7B7C7D7E7F7F8081828383848586878788898A8B8B8C8D8E8F8F9091929394949596979898999A9B9C9D9D9E9FA0A1A2A2A3A4A5A6A7A7A8A9AAABACADADAEAFB0B1B2B2><CCCCCBCBCBCACACAC9C9C8C8C7C7C6C6C5C5C4C4C3C2C2C1C1C0C0BFBEBEBDBDBCBBBBBAB9B9B8B7B7B6B6B5B4B4B3B2B1B1B0AFAFAEADADACABAAAAA9A8A8A7A6A5A5A4A3A2A2A1A0A09F9E9D9C9C9B9A999998979696959493929291908F8E8E8D8C8B8A8A8988878686858483828181807F7E7D7C7C7B7A7978777776757473727171706F6E6D6C6B6A6A69686766656463636261605F5E5D5C5B5B5A59585756555453525151504F4E4D4C4B4A49484746464544434241403F3E3D3C3B3A39383837363534333231302F2E2D2C2B2A29282726252423222221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br<737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5B5A59585756555453525150504F4E4D4C4B4A4949484746454443434241403F3E3E3D3C3B3A3A393837363635343333323130302F2E2D2D2C2B2A2A29282827262525242323222121201F1F1E1D1D1C1C1B1A1A19181817171616151414131312121111100F0F0E0E0D0D0C0C0C0B0B0A0A090908080807070606060505050404040303030202020201010101010000000000><00000000000000000000000001010101010101010101010101010101010101010101010102020202020202020202020202020202020202020202020202020303030303030303030303030303030303030303030303030303030303030304040404040404040404040404040404040404040404040404040404040404040404040404050505050505050505050505050505050505050505050505050505050505050505050505050505050505><BFBFBFC0C0C0C0C0C0C0C0C0C1C1C1C1C1C1C1C1C1C2C2C2C2C2C2C2C2C2C2C3C3C3C3C3C3C3C3C3C3C4C4C4C4C4C4C4C4C4C4C5C5C5C5C5C5C5C5C5C5C5C6C6C6C6C6C6C6C6C6C6C6C6C7C7C7C7C7C7C7C7C7C7C7C7C8C8C8C8C8C8C8C8C8C8C8C8C8C9C9C9C9C9C9C9C9C9C9C9C9C9C9C9CACACACACACACACACACACACACACACACACBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC>01 %_Br[0.05 0.7 0 0 1 50 100 %_Bs0 0.02 0.8 0 1 57 36 %_Bs0.45 0 0.75 0 1 37 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Rainbow)(Rainbow) 0 6 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>1001 %_Br1<0708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>001 %_Br1<00000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010101010102020202020202020202020202020202020202020202020202020202020202020202020203030303030303030303030303030303030303030303030303030303030303030303030304040404040404040404040404040404040404040404040404040404040404040404040405050505050505050505050505050505050505050505050505050505050505050505050506060606060606060606060606060606060606060606060606060606060606060606060607070707070707070707070707070707070707070707><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>0101 %_Br0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>101 %_Br[0 1 0 0 1 50 100 %_Bs1 1 0 0 1 50 80 %_Bs1 0.0279 0 0 1 50 60 %_Bs1 0 1 0 1 50 40 %_Bs0 0 1 0 1 50 20 %_Bs0 1 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (screen)(screen) 0 3 Bd[0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A><CCCCCCCDCDCDCDCDCECECECECECFCFCFCFD0D0D0D0D0D1D1D1D1D1D2D2D2D2D2D3D3D3D3D3D4D4D4D4D5D5D5D5D5D6D6D6D6D6D7D7D7D7D7D8D8D8D8D8D9D9D9D9DADADADADADBDBDBDBDBDCDCDCDCDCDDDDDDDDDDDEDEDEDEDFDFDFDFDFE0E0E0E0E0E1E1E1E1E1E2E2E2E2E2E3E3E3E3E4E4E4E4E4E5E5E5E5E5E6E6E6E6E6E7E7E7E7E7E8E8E8E8E9E9E9E9E9EAEAEAEAEAEBEBEBEBEBECECECECECEDEDEDEDEEEEEEEEEEEFEFEFEFEFF0F0F0F0F0F1F1F1F1F1F2F2F2F2F3F3F3F3F3F4F4F4F4F4F5F5F5F5F5F6F6F6F6F6F7F7F7F7F8F8F8F8F8F9F9F9F9F9FAFAFAFAFAFBFBFBFBFBFCFCFCFCFDFDFDFDFDFEFEFEFEFEFFFFFF>01 %_Br<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><8080808181828283838484858586868787888889898A8A8B8B8C8C8D8D8E8E8F8F90909191929293939494959596969797989899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A5A5A6A6A7A7A8A8A9A9AAAAABABACACADADAEAEAFAFB0B0B1B1B2B2B3B3B4B4B5B5B6B6B7B7B8B8B9B9BABABBBBBCBCBDBDBEBEBFBFC0C0C1C1C2C2C3C3C4C4C5C5C6C6C7C7C8C8C9C9CACACBCBCCCCCDCDCECECFCFD0D0D1D1D2D2D3D3D4D4D5D5D6D6D7D7D8D8D9D9DADADBDBDCDCDDDDDEDEDFE0E0E1E1E2E2E3E3E4E4E5E5E6E6E7E7E8E8E9E9EAEAEBEBECECEDEDEEEEEFEFF0F0F1F1F2F2F3F3F4F4F5F5F6F6F7F7F8F8F9F9FAFAFBFBFCFCFDFDFEFEFFFF><0001020203040506060708090A0A0B0C0D0E0E0F1011121213141516161718191A1A1B1C1D1E1E1F2021222223242526262728292A2A2B2C2D2E2E2F3031323233343536363738393A3A3B3C3D3E3E3F4041424243444546464748494A4A4B4C4D4E4E4F5051525253545556565758595A5A5B5C5D5E5E5F6061626263646566666768696A6A6B6C6D6E6E6F7071727273747576767778797A7A7B7C7D7E7E7F8081828283848586868788898A8A8B8C8D8E8E8F9091929293949596969798999A9A9B9C9D9E9E9FA0A1A2A2A3A4A5A6A6A7A8A9AAAAABACADAEAEAFB0B1B2B2B3B4B5B6B6B7B8B9BABABBBCBDBEBEBFC0C1C2C2C3C4C5C6C6C7C8C9CACACBCC>01 %_Br[0 0.04 1 0 1 50 100 %_Bs0 1 0.8 0 1 50 50 %_Bs1 0.5 0 0 (Blue) 0 3 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Steel Bar)(Steel Bar) 0 3 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>0 %_Br[0 0 50 100 %_Bs1 0 50 70 %_Bs0 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Orange Radial)(Yellow & Orange Radial) 1 2 Bd[0<0001010203040506060708090A0B0C0C0D0E0F10111213131415161718191A1B1C1D1D1E1F202122232425262728292A2B2B2C2D2E2F303132333435363738393A3B3C3D3E3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F60606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C><FFFFFFFFFEFEFEFEFEFEFEFDFDFDFDFDFDFCFCFCFCFCFCFBFBFBFBFBFBFAFAFAFAFAFAF9F9F9F9F9F9F8F8F8F8F8F8F7F7F7F7F7F7F6F6F6F6F6F6F5F5F5F5F5F5F4F4F4F4F4F3F3F3F3F3F3F2F2F2F2F2F2F1F1F1F1F1F0F0F0F0F0F0EFEFEFEFEFEFEEEEEEEEEEEDEDEDEDEDEDECECECECECEBEBEBEBEBEBEAEAEAEAEAE9E9E9E9E9E9E8E8E8E8E8E8E7E7E7E7E7E6E6E6E6E6E5>01 %_Br[0 0 1 0 1 52 19 %_Bs0 0.55 0.9 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Purple Radial)(Yellow & Purple Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 13 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.56 0 1 0 (PANTONE 376 CV) 0 xPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc0.46 0 1 0 kPcBb2 (Pink, Yellow, Green) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Purple Radial) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPcBb2 (Rainbow) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.21 0 0.59 0 kPc0.46 0 1 0 kPcBb2 (Steel Bar) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPcBb2 (screen) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPcBb2 (Green & Blue) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPcBb0 0 0 0 Bh2 (Yellow & Orange Radial) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A1 Ap0 O0.56 0 1 0 (PANTONE 376 CV) 0 x800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR294.75 642.9049 m203.1246 642.9049 128.8451 568.6254 128.8451 477 c128.8451 385.3746 203.1246 311.0951 294.75 311.0951 c386.3754 311.0951 460.6549 385.3746 460.6549 477 c460.6549 568.6254 386.3754 642.9049 294.75 642.9049 cf1 g0 R1 G2.6783 w294.75 512.1137 m275.1387 512.1137 259.24 496.3951 259.24 477.0058 c259.24 457.6165 275.1387 441.8979 294.75 441.8979 c314.3613 441.8979 330.2599 457.6165 330.2599 477.0058 c330.2599 496.3951 314.3613 512.1137 294.75 512.1137 cb2.8 w294.75 499.981 m282.0581 499.981 271.769 489.6918 271.769 477 c271.769 464.3081 282.0581 454.019 294.75 454.019 c307.4418 454.019 317.731 464.3081 317.731 477 c317.731 489.6918 307.4418 499.981 294.75 499.981 cfu0 Ap0 R0 G0.35 w294.7916 677.5417 m294.7916 664.875 lS301.125 671.2084 m288.4583 671.2084 lSUu294.7708 288.8541 m294.7708 276.1875 lS301.1042 282.5208 m288.4375 282.5208 lSUu489.1042 483.3541 m489.1042 470.6875 lS495.4375 477.0208 m482.7708 477.0208 lSUu100.4375 483.3541 m100.4375 470.6875 lS106.7708 477.0208 m94.1042 477.0208 lSU1 w-4014 546.3333 m4626 546.3333 L(N) *u*u0 O0 g262.4679 355.5164 m263.8102 355.7432 265.7998 355.9142 268.0231 355.9142 c270.7655 355.9142 272.6865 355.4958 274.0061 354.4495 c275.1098 353.5735 275.717 352.2741 275.717 350.5739 c275.717 348.2321 274.0426 346.6004 272.4533 346.0303 c272.4533 345.9431 L273.7357 345.4252 274.4574 344.1994 274.9236 342.5006 c275.4948 340.4083 276.0528 337.9987 276.4155 337.2824 c272.1358 337.2824 L271.8517 337.8174 271.3908 339.3035 270.8645 341.5917 c270.3495 343.9025 269.5734 344.5197 267.8529 344.5416 c266.6097 344.5416 L266.6097 337.2824 L262.4679 337.2824 L262.4679 355.5164 lf1 D266.6097 347.566 m268.247 347.566 L270.321 347.566 271.5614 348.6231 271.5614 350.2301 c271.5614 351.9225 270.4013 352.7879 268.4918 352.7988 c267.491 352.7988 266.9046 352.7333 266.6097 352.6587 C266.6097 347.566 lf*U*u0 D301.1957 341.5975 m302.303 341.0033 304.0419 340.4363 305.8298 340.4363 c307.7496 340.4363 308.7675 341.2332 308.7675 342.4501 c308.7675 343.5854 307.8854 344.2545 305.6723 345.0343 c302.5878 346.1281 300.5724 347.8087 300.5724 350.5092 c300.5724 353.6615 303.219 356.0582 307.5656 356.0582 c309.6737 356.0582 311.1958 355.6394 312.2864 355.128 c311.3624 351.7754 L310.6294 352.1253 309.2984 352.6532 307.5034 352.6532 c305.6832 352.6532 304.8142 351.8107 304.8142 350.8654 c304.8142 349.6911 305.8384 349.1719 308.2366 348.2662 c311.5099 347.0427 313.0253 345.3439 313.0253 342.7303 c313.0253 339.6434 310.6619 336.9947 305.5725 336.9947 c303.4772 336.9947 301.381 337.5645 300.3505 338.1437 C301.1957 341.5975 lf*U*u317.2528 355.7702 m321.3949 355.7702 L321.3949 347.598 L321.464 347.598 L321.869 348.2978 322.3109 348.9667 322.7328 349.613 c326.9185 355.7702 L332.0559 355.7702 L325.9396 347.9021 L332.379 337.2824 L327.5137 337.2824 L322.9647 345.2531 L321.3949 343.3199 L321.3949 337.2824 L317.2528 337.2824 L317.2528 355.7702 lf*U1 Ap294.2476 352.3379 m291.0441 355.5417 285.8502 355.5417 282.6464 352.3379 c279.4432 349.1347 279.4432 343.9406 282.6464 340.7372 c285.8502 337.5337 291.0441 337.5337 294.2476 340.7372 c297.4508 343.9406 297.4508 349.1347 294.2476 352.3379 cf0 Ap0.56 0 1 0 (PANTONE 376 CV) 0 x0 R0.56 0 1 0 (PANTONE 376 CV) 0 X293.511 345.953 m287.8498 346.0791 L290.588 341.1325 L290.7281 342.4792 291.2796 343.5663 V295.8242 340.8106 L296.202 341.434 L291.6648 344.1854 L292.3868 345.1565 293.511 345.953 Ybu*u0 g264.3253 327.5841 m264.3791 326.1333 265.5019 325.4993 266.7977 325.4993 c267.7288 325.4993 268.3952 325.6452 269.007 325.8701 c269.3068 324.4767 L268.6213 324.1858 267.6708 323.9686 266.5088 323.9686 c263.9096 323.9686 262.3872 325.5746 262.3872 328.0277 c262.3872 330.2372 263.7276 332.328 266.3024 332.328 c268.9048 332.328 269.752 330.1883 269.752 328.4343 c269.752 328.0578 269.7193 327.7567 269.6805 327.5841 C264.3253 327.5841 lf1 D267.846 328.9951 m267.8547 329.7366 267.5323 330.9461 266.1764 330.9461 c264.9304 330.9461 264.4121 329.8143 264.322 328.9951 C267.846 328.9951 lf*U*u0 D274.7996 329.2154 m274.7996 327.8222 L271.5496 327.8222 L271.5496 329.2154 L274.7996 329.2154 lf*U*u276.6259 326.0032 m277.0726 325.7268 277.9439 325.419 278.6687 325.419 c279.5593 325.419 279.9571 325.7926 279.9571 326.3177 c279.9571 326.8599 279.6269 327.1351 278.6424 327.4849 c277.0754 328.0214 276.4227 328.8742 276.4296 329.8229 c276.4296 331.2307 277.5997 332.328 279.4677 332.328 c280.3499 332.328 281.1215 332.1077 281.5912 331.8497 c281.1898 330.4289 L280.8529 330.6196 280.2052 330.8893 279.4964 330.8893 c278.7765 330.8893 278.3753 330.5339 278.3753 330.0414 c278.3753 329.5334 278.7613 329.2891 279.7729 328.92 c281.2299 328.405 281.9023 327.6619 281.9092 326.4819 c281.9092 325.0217 280.772 323.9686 278.6579 323.9686 c277.689 323.9686 276.8082 324.2006 276.2188 324.5295 C276.6259 326.0032 lf*U*u284.9314 332.1471 m286.3746 327.8556 L286.5339 327.3597 286.7075 326.7482 286.8256 326.3032 c286.8725 326.3032 L286.9978 326.7527 287.1473 327.3554 287.2973 327.8722 c288.551 332.1471 L290.7099 332.1471 L288.7044 326.684 L287.6057 323.6956 286.863 322.3677 285.9199 321.537 c285.1243 320.8434 284.3001 320.5798 283.7969 320.5135 c283.3403 322.2176 L283.6793 322.3026 284.1032 322.4844 284.5093 322.7699 c284.8946 323.0231 285.3412 323.496 285.6207 324.0467 c285.7005 324.1848 285.748 324.3027 285.748 324.402 c285.748 324.49 285.7257 324.6079 285.6418 324.7964 c282.7001 332.1471 L284.9314 332.1471 lf*U*u291.742 326.0032 m292.1887 325.7268 293.0599 325.419 293.7846 325.419 c294.6753 325.419 295.0731 325.7926 295.0731 326.3177 c295.0731 326.8599 294.7429 327.1351 293.7585 327.4849 c292.1913 328.0214 291.5387 328.8742 291.5458 329.8229 c291.5458 331.2307 292.7156 332.328 294.5837 332.328 c295.4659 332.328 296.2375 332.1077 296.7071 331.8497 c296.3058 330.4289 L295.9689 330.6196 295.3211 330.8893 294.6124 330.8893 c293.8925 330.8893 293.4913 330.5339 293.4913 330.0414 c293.4913 329.5334 293.8773 329.2891 294.889 328.92 c296.346 328.405 297.0182 327.6619 297.0251 326.4819 c297.0251 325.0217 295.888 323.9686 293.7738 323.9686 c292.8051 323.9686 291.9242 324.2006 291.3348 324.5295 C291.742 326.0032 lf*U*u301.0995 334.2043 m301.0995 332.1471 L303.0254 332.1471 L303.0254 330.6389 L301.0995 330.6389 L301.0995 327.1062 L301.0995 326.1263 301.3605 325.6285 302.1349 325.6285 c302.5021 325.6285 302.6916 325.6538 302.9211 325.7166 c302.9618 324.1765 L302.6578 324.0626 302.127 323.9686 301.4888 323.9686 c300.7446 323.9686 300.125 324.222 299.7489 324.6284 c299.3139 325.088 299.1158 325.8248 299.1158 326.874 c299.1158 330.6389 L297.9731 330.6389 L297.9731 332.1471 L299.1158 332.1471 L299.1158 333.638 L301.0995 334.2043 lf*U*u305.9716 327.5841 m306.0254 326.1333 307.1481 325.4993 308.4439 325.4993 c309.3751 325.4993 310.0415 325.6452 310.6533 325.8701 c310.953 324.4767 L310.2675 324.1858 309.3172 323.9686 308.1552 323.9686 c305.5559 323.9686 304.0335 325.5746 304.0335 328.0277 c304.0335 330.2372 305.3737 332.328 307.9487 332.328 c310.5512 332.328 311.3983 330.1883 311.3983 328.4343 c311.3983 328.0578 311.3655 327.7567 311.3269 327.5841 C305.9716 327.5841 lf1 D309.4922 328.9951 m309.501 329.7366 309.1786 330.9461 307.8226 330.9461 c306.5766 330.9461 306.0583 329.8143 305.9683 328.9951 C309.4922 328.9951 lf*U*u0 D313.1085 329.7663 m313.1085 330.6911 313.0792 331.4537 313.0427 332.1471 c314.7718 332.1471 L314.8645 330.9715 L314.9113 330.9715 L315.2977 331.5923 316.0261 332.328 317.3767 332.328 c318.4369 332.328 319.2532 331.7389 319.5975 330.8516 c319.6305 330.8516 L319.9104 331.2899 320.2473 331.6248 320.6094 331.8574 c321.0653 332.1638 321.5694 332.328 322.2366 332.328 c323.5599 332.328 324.9085 331.4218 324.9085 328.8543 c324.9085 324.1412 L322.9341 324.1412 L322.9341 328.5697 L322.9341 329.904 322.4722 330.6869 321.5061 330.6869 c320.8136 330.6869 320.3064 330.1985 320.0986 329.6212 c320.0341 329.4278 319.9957 329.1717 319.9957 328.9453 c319.9957 324.1412 L318.0214 324.1412 L318.0214 328.7705 L318.0214 329.8983 317.5705 330.6869 316.6399 330.6869 c315.8811 330.6869 315.374 330.092 315.1834 329.5432 c315.1111 329.3398 315.0829 329.1006 315.0829 328.8737 c315.0829 324.1412 L313.1085 324.1412 L313.1085 329.7663 lf*U*u327.0407 326.0032 m327.4875 325.7268 328.3588 325.419 329.0834 325.419 c329.9741 325.419 330.3718 325.7926 330.3718 326.3177 c330.3718 326.8599 330.0416 327.1351 329.0573 327.4849 c327.4903 328.0214 326.8376 328.8742 326.8445 329.8229 c326.8445 331.2307 328.0145 332.328 329.8825 332.328 c330.7646 332.328 331.5362 332.1077 332.0059 331.8497 c331.6045 330.4289 L331.2677 330.6196 330.6199 330.8893 329.9112 330.8893 c329.1912 330.8893 328.7902 330.5339 328.7902 330.0414 c328.7902 329.5334 329.176 329.2891 330.1877 328.92 c331.6447 328.405 332.317 327.6619 332.3239 326.4819 c332.3239 325.0217 331.1867 323.9686 329.0726 323.9686 c328.1039 323.9686 327.2229 324.2006 326.6335 324.5295 C327.0407 326.0032 lf*UUU1 g326.7807 585.0947 mF*u0 g231.7397 590.5479 m227.7999 605.0709 L226.1776 589.7755 L220.6156 590.8183 L225.0189 613.7229 L230.1946 613.7229 L234.3276 598.0411 L238.4604 613.7229 L243.6361 613.7229 L248.0394 590.8183 L242.4774 589.7755 L240.8551 605.0709 L236.9153 590.5479 L231.7397 590.5479 lf*U*u266.076 598.1956 m266.076 595.6464 267.0029 593.8696 269.0115 592.3246 c264.2992 589.9299 L262.9474 591.2817 262.6385 591.7452 v260.9775 589.7755 257.9648 589.7755 v254.3726 589.7755 250.9736 592.4406 250.9736 595.9555 c250.9736 599.7792 254.1024 601.9423 259.1235 601.9423 c260.4753 601.9423 260.6685 601.9423 y260.6685 603.1783 259.8959 604.2211 258.3511 604.2211 c256.8447 604.2211 255.9562 603.5645 y253.1366 607.2339 L255.261 609.0878 258.3511 609.0878 v263.1791 609.0878 266.076 606.0364 266.076 601.9423 C266.076 598.1956 lf1 D260.6685 598.3501 m259.2781 598.3501 259.1235 598.3501 v256.9605 598.3501 256.4198 597.1528 256.4584 595.9555 c256.4971 594.8739 257.6559 594.2558 258.4669 594.2558 c259.9346 594.2558 260.9775 595.2987 y260.7843 596.3802 260.6685 597.539 260.6685 598.3501 cf*U*u0 D280.2487 597.9638 m280.2487 595.4147 281.1757 593.6379 283.184 592.0928 c278.4719 589.6982 L275.9226 592.0543 274.8412 594.449 274.8412 597.9638 c274.8412 603.2941 L271.3649 603.2941 L271.3649 608.3153 L274.8412 608.3153 L274.8412 613.7229 L280.2487 613.7229 L280.2487 608.3153 L283.9181 608.3153 L283.9181 603.2941 L280.2487 603.2941 L280.2487 597.9638 lf*U*u288.1613 617.199 m293.5688 617.199 L293.5688 606.5773 L295.3069 609.1651 298.7445 609.1651 v301.0234 609.1651 303.9975 607.5429 303.9975 603.8735 c303.9975 590.5479 L298.5901 590.5479 L298.5901 600.9766 L298.5901 602.2899 298.6673 604.0666 297.2382 604.0666 c293.9551 604.0666 293.5688 600.6676 y293.5688 590.5479 L288.1613 590.5479 L288.1613 617.199 lf*U*u313.258 597.8866 m311.5198 598.5433 308.2366 599.6247 308.2366 603.4874 c308.2366 606.7705 311.7129 609.0878 315.1892 609.0878 c318.0861 609.0878 319.8242 608.1222 321.4463 606.5773 c318.6654 603.101 L317.893 603.9893 316.5411 604.4528 315.5755 604.4528 c314.2622 604.4528 313.258 604.1439 313.258 603.1783 c313.258 602.4831 314.2237 602.2125 314.9961 601.9423 c316.5411 601.3629 L318.7814 600.5132 321.5624 599.6247 321.5624 595.7623 c321.5624 592.286 318.1247 589.7755 314.6098 589.7755 c311.7129 589.7755 309.3955 590.5479 307.6574 592.4791 c310.3611 596.3416 L311.1335 595.376 312.8331 594.4104 314.2237 594.4104 c315.5755 594.4104 316.5411 594.7966 316.5411 595.8781 c316.5411 596.7278 315.5755 596.9983 314.8029 597.3073 C313.258 597.8866 lf*U*u338.5531 600.3972 m327.3517 600.3972 L327.3517 606.191 L338.5531 606.191 L338.5531 600.3972 lf*U*u234.4668 554.0041 m229.6181 571.8783 L227.6214 553.0534 L220.7762 554.3368 L226.1954 582.5268 L232.5655 582.5268 L237.6519 563.2265 L242.7384 582.5268 L249.1086 582.5268 L254.5279 554.3368 L247.6824 553.0534 L245.6858 571.8783 L240.837 554.0041 L234.4668 554.0041 lf*U*u276.252 563.4165 m276.252 560.2791 277.3929 558.0923 279.8647 556.1908 c274.0652 553.2435 L272.4012 554.9073 272.0211 555.4778 v269.9769 553.0534 266.269 553.0534 v261.848 553.0534 257.6647 556.3335 257.6647 560.6594 c257.6647 565.3656 261.5152 568.0278 267.6951 568.0278 c269.359 568.0278 269.5966 568.0278 y269.5966 569.5491 268.646 570.8325 266.7443 570.8325 c264.8903 570.8325 263.7971 570.0244 y260.3268 574.5405 L262.9413 576.8223 266.7443 576.8223 v272.6866 576.8223 276.252 573.0667 276.252 568.0278 C276.252 563.4165 lf1 D269.5966 563.6067 m267.8853 563.6067 267.6951 563.6067 v265.0329 563.6067 264.3674 562.1331 264.415 560.6594 c264.4627 559.3285 265.8889 558.5678 266.8869 558.5678 c268.6935 558.5678 269.9769 559.8513 y269.7392 561.1823 269.5966 562.6085 269.5966 563.6067 cf*U*u0 D288.7042 563.0362 m286.565 563.8445 282.5242 565.1754 282.5242 569.9292 c282.5242 573.9699 286.8026 576.8223 291.0811 576.8223 c294.6463 576.8223 296.7855 575.6339 298.7821 573.7322 c295.3593 569.4539 L294.4087 570.5472 292.7449 571.1177 291.5563 571.1177 c289.9402 571.1177 288.7042 570.7373 288.7042 569.5491 c288.7042 568.6933 289.8925 568.3605 290.8433 568.0278 c292.7449 567.3147 L295.502 566.2689 298.9248 565.1754 298.9248 560.4218 c298.9248 556.1433 294.694 553.0534 290.3681 553.0534 c286.8026 553.0534 283.9505 554.0041 281.8113 556.3809 c285.1389 561.1348 L286.0896 559.9463 288.1812 558.7579 289.8925 558.7579 c291.5563 558.7579 292.7449 559.2333 292.7449 560.5643 c292.7449 561.6101 291.5563 561.943 290.6057 562.3232 C288.7042 563.0362 lf*U*u313.1812 563.1314 m313.1812 559.9938 314.3219 557.8072 316.794 555.9056 c310.9945 552.9583 L307.8569 555.8581 306.5259 558.8054 306.5259 563.1314 c306.5259 569.6915 L302.2474 569.6915 L302.2474 575.8715 L306.5259 575.8715 L306.5259 582.5268 L313.1812 582.5268 L313.1812 575.8715 L317.6972 575.8715 L317.6972 569.6915 L313.1812 569.6915 L313.1812 563.1314 lf*U*u331.3818 558.9956 m335.0898 558.9956 336.3258 560.9446 y340.319 557.3318 L337.2289 553.0534 331.3818 553.0534 v325.3446 553.0534 321.1137 558.9004 321.1137 564.9377 c321.1137 570.975 325.2495 576.8223 331.3818 576.8223 c336.1356 576.8223 339.4632 574.1602 340.8419 569.7865 c338.2273 564.6051 333.9964 561.943 327.6263 561.943 c327.6263 561.4201 328.5295 558.9956 331.3818 558.9956 cf1 D327.4837 566.3638 m330.8115 566.3638 332.6178 567.172 334.6145 568.9309 c333.9964 570.7373 331.3818 570.7373 v328.6247 570.7373 327.4837 567.2195 327.4837 566.3638 cf*U*u0 D353.8084 566.6967 m353.8084 554.0041 L347.1532 554.0041 L347.1532 566.4589 L347.1532 569.5966 346.0123 571.7832 343.5403 573.6846 c349.34 576.6319 L350.4333 575.7765 351.7644 573.8273 y355.4248 576.8223 358.5622 576.8223 v360.2261 570.4045 l357.1361 570.4045 353.8084 566.6967 yf*Uu0 R0 G1.51 w313.6725 575.9789 m325.1748 589.9334 331.253 580.8034 338.4054 584.0283 c341.684 585.5066 338.2063 591.1101 341.9085 594.5562 c345.7407 598.1233 349.6199 593.296 yS1 Ap1.5066 w363.0119 583.9361 m366.0052 588.3201 363.0136 591.7525 359.0355 594.4685 c355.0575 597.1845 352.6488 598.3536 349.2298 593.346 c345.527 587.9226 348.5712 586.7964 352.5493 584.0806 c356.5273 581.3645 360.0189 579.5522 363.0119 583.9361 csUu0 Ap0 O1 g1.1039 w376.0276 584.4803 m374.721 582.9303 371.2515 582.9305 v368.5796 582.9309 367.3271 582.8492 366.7629 582.4822 c365.903 581.9224 365.8073 580.9272 365.8996 580.0094 c365.9366 579.6434 365.9872 578.2534 369.4194 578.0286 c374.2392 577.7132 376.0365 579.4122 y368.416 577.1262 366.728 579.5574 v366.2506 580.2452 366.2059 581.4028 367.2443 582.0682 c368.5758 582.9214 374.9518 581.67 376.0276 584.4803 cb376.6006 587.4109 m375.3639 591.357 365.0491 594.6552 v360.9245 595.974 362.3217 598.7149 363.5476 599.1249 c364.7471 599.526 369.845 599.3593 375.2015 595.0591 c366.5435 599.8723 363.8155 598.6305 v362.3943 597.9836 362.9073 596.4524 363.3299 596.1019 c364.9051 594.7957 375.5271 592.5577 376.6006 587.4109 cb0.9511 w363.9364 600.4808 m363.5855 600.8002 363.4317 601.2148 v363.2083 601.8168 363.5749 602.8372 364.5021 602.911 c366.7848 603.0931 368.8377 602.7651 371.0273 601.9085 c373.3041 601.0177 376.4686 598.6109 y370.236 602.0794 367.3575 602.3972 v364.9179 602.6662 364.4794 602.5201 364.2134 602.2259 c363.4622 601.3955 363.9364 600.4808 yb0.9799 w377.055 602.2442 m377.6907 601.6665 378.796 600.5824 y378.1526 601.3669 375.28 603.2115 373.8418 603.6458 c371.9345 604.2215 371.6895 603.2014 y371.6937 603.3445 371.7509 603.9454 372.1155 604.0221 c372.5001 604.1031 373.7155 604.3073 375.6982 603.1174 c376.2418 602.791 376.7763 602.4973 377.055 602.2442 cbU*u0 g1 w353.8846 587.1314 m352.9081 587.1357 L352.922 590.2957 L351.9046 590.3002 L351.9086 591.2089 L354.9197 591.1958 L354.9158 590.287 L353.8984 590.2915 L353.8846 587.1314 lf*U*u357.2557 587.1167 m356.575 589.6695 L356.2786 586.9853 L355.3028 587.1727 L356.0935 591.1907 L357.0022 591.1868 L357.7157 588.4302 L358.4535 591.1803 L359.3621 591.1765 L360.1177 587.1516 L359.1404 586.9728 L358.8673 589.6595 L358.1643 587.1127 L357.2557 587.1167 lf*U*u1 g224.6911 420.9447 m227.2106 420.9447 L227.2106 410.1107 L227.2106 408.242 226.6227 406.9613 225.2369 405.7225 c223.1373 407.0032 L224.1871 407.8011 224.6911 408.7669 224.6911 410.1107 C224.6911 420.9447 lf*U*u238.0626 412.5042 m238.0626 411.1185 238.5665 410.1527 239.6583 409.3128 c237.6427 408.116 L237.3278 408.326 236.4459 409.5018 y234.9972 407.9901 233.3175 407.9901 v231.7848 407.9901 230.2101 409.2078 230.2101 410.9925 c230.2101 418.0052 L232.6036 418.0052 L232.6036 412.1263 L232.6036 411.6224 232.6036 410.5096 233.6535 410.5096 c235.3541 410.5096 235.6691 412.3153 y235.6691 418.0052 L238.0626 418.0052 L238.0626 412.5042 lf*U*u241.8434 413.848 m241.8434 415.2337 241.3395 416.1995 240.2477 417.0394 c242.2633 418.2362 L242.7252 417.9002 243.4811 416.8084 y244.9928 418.3621 246.6725 418.3621 v248.3942 418.3621 249.9059 417.1444 249.9059 415.3597 c249.9059 408.347 L247.5123 408.347 L247.5123 414.2259 L247.5123 415.0028 247.3864 415.8426 246.3366 415.8426 c245.0558 415.8426 244.2369 414.0369 y244.2369 408.347 L241.8434 408.347 L241.8434 413.848 lf*U*u255.2196 421.0286 m255.2196 420.2308 254.5687 419.5799 253.7709 419.5799 c252.973 419.5799 252.3222 420.2308 252.3222 421.0286 c252.3222 421.8265 252.973 422.4774 253.7709 422.4774 c254.5687 422.4774 255.2196 421.8265 255.2196 421.0286 cf254.9887 408.347 m252.5531 408.347 L252.5531 418.0052 L254.9887 418.0052 L254.9887 408.347 lf*U*u261.8336 418.3201 m264.5211 418.3201 266.4108 415.8846 266.4108 413.1761 c266.4108 410.4676 264.5211 408.0321 261.8336 408.0321 c259.1461 408.0321 257.2565 410.4676 257.2565 413.1761 c257.2565 415.8846 259.1461 418.3201 261.8336 418.3201 cf1 D259.692 413.1761 m259.692 411.8114 260.4689 410.4256 261.8336 410.4256 c263.1984 410.4256 263.9752 411.8114 263.9752 413.1761 c263.9752 414.5408 263.1984 415.9266 261.8336 415.9266 c260.4689 415.9266 259.692 414.5408 259.692 413.1761 cf*U*u0 D271.3226 414.0369 m271.3226 408.347 L268.9291 408.347 L268.9291 413.848 L268.9291 415.2337 268.4252 416.1995 267.3334 417.0394 c269.349 418.2362 L269.7899 417.9002 270.5248 416.8924 270.5668 416.8084 c272.1625 418.3201 273.5902 418.3201 v274.0521 415.8216 l272.7504 415.8846 271.3226 414.0369 yf*U*u285.1974 421.2596 m286.9401 421.2596 288.1788 420.7557 289.3336 419.4749 c287.7799 417.6693 L287.129 418.5091 286.2892 418.824 285.1974 418.824 c283.2658 418.824 282.5099 416.5775 282.5099 414.6458 c282.5099 412.7142 283.2658 410.4676 285.1974 410.4676 c286.2892 410.4676 287.129 410.7825 287.7799 411.6224 c289.3336 409.8167 L288.1788 408.536 286.9401 408.0321 285.1974 408.0321 c281.922 408.0321 279.9904 411.3704 279.9904 414.6458 c279.9904 417.9212 282.027 421.2596 285.1974 421.2596 cf*U*u294.8156 410.3416 m296.2853 410.3416 296.9572 411.1605 y298.3009 409.8167 L297.0202 408.0321 294.8156 408.0321 v292.1491 408.0321 290.4484 410.5096 290.4484 413.1761 c290.4484 415.8426 292.1911 418.3201 294.8156 418.3201 c296.9152 418.3201 298.2379 417.1654 298.8258 415.3177 c297.734 413.0501 295.9074 411.8533 293.3878 411.8533 c293.2199 411.8533 293.0309 411.8533 y293.1149 411.5804 293.4928 410.3416 294.8156 410.3416 cf1 D292.9049 413.68 m294.7946 413.68 295.6134 414.2469 296.3273 415.3177 c295.8234 415.9686 294.8156 415.9686 v293.1569 415.9686 292.9049 413.68 yf*U*u0 D303.5507 414.0369 m303.5507 408.347 L301.1571 408.347 L301.1571 413.848 L301.1571 415.2337 300.6532 416.1995 299.5614 417.0394 c301.577 418.2362 L302.018 417.9002 302.7528 416.8924 302.7948 416.8084 c304.3905 418.3201 305.8182 418.3201 v306.2802 415.8216 l304.9784 415.8846 303.5507 414.0369 yf*U*u310.9603 412.3782 m310.9603 410.9925 311.4642 410.0267 312.556 409.1868 c310.5404 407.9901 L309.1547 409.2288 308.5668 410.5096 308.5668 412.3782 c308.5668 415.6116 L306.7821 415.6116 L306.7821 418.0052 L308.5668 418.0052 L308.5668 420.9447 L310.9603 420.9447 L310.9603 418.0052 L312.85 418.0052 L312.85 415.6116 L310.9603 415.6116 L310.9603 412.3782 lf*U*u317.3224 421.0286 m317.3224 420.2308 316.6715 419.5799 315.8737 419.5799 c315.0758 419.5799 314.4249 420.2308 314.4249 421.0286 c314.4249 421.8265 315.0758 422.4774 315.8737 422.4774 c316.6715 422.4774 317.3224 421.8265 317.3224 421.0286 cf317.0914 408.347 m314.6559 408.347 L314.6559 418.0052 L317.0914 418.0052 L317.0914 408.347 lf*U*u323.1806 408.0111 m323.1806 406.1424 322.5927 404.8616 321.2069 403.6229 c319.1913 404.8197 L320.2831 405.6595 320.787 406.6253 320.787 408.0111 c320.787 415.6116 L319.1073 415.6116 L319.1073 418.0052 L320.787 418.0052 L320.787 419.097 L320.787 421.1336 322.0888 422.7293 324.0834 423.1492 c325.4481 421.7635 L324.1044 421.5325 323.1806 420.4617 323.1806 419.097 c323.1806 418.0052 L325.0702 418.0052 L325.0702 415.6116 L323.1806 415.6116 L323.1806 408.0111 lf*U*u329.5399 421.0286 m329.5399 420.2308 328.889 419.5799 328.0912 419.5799 c327.2933 419.5799 326.6425 420.2308 326.6425 421.0286 c326.6425 421.8265 327.2933 422.4774 328.0912 422.4774 c328.889 422.4774 329.5399 421.8265 329.5399 421.0286 cf329.309 408.347 m326.8734 408.347 L326.8734 418.0052 L329.309 418.0052 L329.309 408.347 lf*U*u336.049 418.3201 m337.6867 418.3201 338.8414 417.8162 339.8283 416.5355 c337.7916 415.0867 L337.3507 415.6746 336.8048 415.9266 336.049 415.9266 c334.7052 415.9266 334.0123 414.5198 334.0123 413.1761 c334.0123 411.8323 334.7052 410.4256 336.049 410.4256 c336.8048 410.4256 337.3507 410.6776 337.7916 411.2655 c339.8283 409.8167 L338.8414 408.536 337.6867 408.0321 336.049 408.0321 c333.4035 408.0321 331.5768 410.4886 331.5768 413.1761 c331.5768 415.8636 333.4035 418.3201 336.049 418.3201 cf*U*u348.3495 412.5042 m348.3495 411.1185 348.8534 410.1527 349.9452 409.3128 c347.9296 408.116 L347.5307 408.389 347.0477 409.0609 346.9008 409.2708 c345.9349 408.0321 344.2133 408.0321 v342.4496 408.0321 340.6859 409.3758 340.6859 411.2864 c340.6859 413.3651 342.5756 414.6458 344.8432 414.6458 c345.2001 414.6458 345.9559 414.6458 y345.9559 415.5487 345.431 416.1156 344.4232 416.1156 c343.9823 416.1156 343.2684 415.9896 342.7225 415.6116 c341.8617 417.5223 L342.8695 418.3201 344.4232 418.3201 v347.0267 418.3201 348.3495 416.6614 348.3495 414.5408 C348.3495 412.5042 lf1 D345.9559 412.7982 m344.9271 412.7982 344.8432 412.7982 v343.3524 412.7982 343.1215 411.8533 343.1215 411.2864 c343.1215 410.6146 343.7514 410.2576 344.2973 410.2576 c345.2841 410.2576 346.0819 411.1815 y345.9559 411.9793 345.9559 412.7982 vf*U*u0 D354.7958 412.3782 m354.7958 410.9925 355.2997 410.0267 356.3915 409.1868 c354.3759 407.9901 L352.9901 409.2288 352.4022 410.5096 352.4022 412.3782 c352.4022 415.6116 L350.6176 415.6116 L350.6176 418.0052 L352.4022 418.0052 L352.4022 420.9447 L354.7958 420.9447 L354.7958 418.0052 L356.6854 418.0052 L356.6854 415.6116 L354.7958 415.6116 L354.7958 412.3782 lf*U*u362.0607 410.3416 m363.5304 410.3416 364.2023 411.1605 y365.546 409.8167 L364.2653 408.0321 362.0607 408.0321 v359.3942 408.0321 357.6935 410.5096 357.6935 413.1761 c357.6935 415.8426 359.4362 418.3201 362.0607 418.3201 c364.1603 418.3201 365.483 417.1654 366.0709 415.3177 c364.9791 413.0501 363.1525 411.8533 360.6329 411.8533 c360.465 411.8533 360.276 411.8533 y360.36 411.5804 360.7379 410.3416 362.0607 410.3416 cf1 D360.15 413.68 m362.0397 413.68 362.8585 414.2469 363.5724 415.3177 c363.0685 415.9686 362.0607 415.9686 v360.402 415.9686 360.15 413.68 yf*U*u0 D211.1719 535.028 m211.1719 529.7166 L208.6241 529.7166 L208.6241 542.6713 L211.1719 542.6713 L211.1719 537.5758 L215.3174 537.5758 L215.3174 542.6713 L217.8652 542.6713 L217.8652 529.7166 L215.3174 529.7166 L215.3174 535.028 L211.1719 535.028 lf*U*u223.3313 542.7577 m223.3313 541.9372 222.662 541.2679 221.8415 541.2679 c221.021 541.2679 220.3517 541.9372 220.3517 542.7577 c220.3517 543.5781 221.021 544.2475 221.8415 544.2475 c222.662 544.2475 223.3313 543.5781 223.3313 542.7577 cf223.0938 529.7166 m220.5892 529.7166 L220.5892 539.6485 L223.0938 539.6485 L223.0938 529.7166 lf*U*u232.3579 530.2996 m231.4079 529.3927 230.134 529.3927 v227.5862 529.3927 225.4271 531.8973 225.4271 534.6826 c225.4271 537.4678 227.3703 539.9724 230.134 539.9724 c232.1204 539.9724 233.2647 538.6122 y233.8693 539.4326 234.3875 539.886 v236.4602 538.6553 L235.3375 537.7917 234.8193 536.7985 234.8193 535.3735 c234.8193 529.9325 L234.8193 527.2552 232.8113 524.8586 230.134 524.8586 c228.4499 524.8586 227.2408 525.3768 226.226 526.6938 c227.8453 528.6586 L228.2772 527.7302 229.0976 527.2768 230.134 527.32 c231.4727 527.3847 232.3579 528.5939 232.3579 529.9325 C232.3579 530.2996 lf1 D232.3579 534.6826 m232.3579 536.086 231.5374 537.511 230.134 537.511 c228.7306 537.511 227.9317 536.086 227.9317 534.6826 c227.9317 533.2791 228.7306 531.8541 230.134 531.8541 c231.5374 531.8541 232.3579 533.2791 232.3579 534.6826 cf*U*u0 D238.0181 544.6145 m240.4795 544.6145 L240.4795 538.3531 L241.667 540.0156 243.308 540.0156 v245.0785 540.0156 246.3092 538.7849 246.3092 536.9496 c246.3092 529.7166 L243.8478 529.7166 L243.8478 535.6758 L243.8478 536.4962 243.8478 537.511 242.8114 537.511 c240.9761 537.511 240.4795 535.3951 y240.4795 529.7166 L238.0181 529.7166 L238.0181 544.6145 lf*U*u252.7045 531.7678 m254.2159 531.7678 254.9068 532.6098 y256.2886 531.228 L254.9716 529.3927 252.7045 529.3927 v249.9624 529.3927 248.2135 531.9405 248.2135 534.6826 c248.2135 537.4246 250.0056 539.9724 252.7045 539.9724 c254.8636 539.9724 256.2239 538.7849 256.8284 536.8849 c255.7057 534.553 253.8273 533.3223 251.2363 533.3223 c251.0636 533.3223 250.8693 533.3223 y250.9556 533.0416 251.3443 531.7678 252.7045 531.7678 cf1 D250.7397 535.2008 m252.6829 535.2008 253.525 535.7837 254.2591 536.8849 c253.7409 537.5542 252.7045 537.5542 v250.9988 537.5542 250.7397 535.2008 yf*U*u0 D261.6893 535.5678 m261.6893 529.7166 L259.2279 529.7166 L259.2279 535.3735 L259.2279 536.7985 258.7097 537.7917 257.587 538.6553 c259.6597 539.886 L260.1132 539.5406 260.8688 538.5042 260.912 538.4178 c262.553 539.9724 264.0212 539.9724 v264.4962 537.4031 l263.1575 537.4678 261.6893 535.5678 yf*U*u273.7146 532.2644 m278.0328 532.2644 L278.0328 529.7166 L271.1668 529.7166 L271.1668 542.6713 L273.7146 542.6713 L273.7146 532.2644 lf*U*u283.6067 531.7678 m285.1181 531.7678 285.809 532.6098 y287.1909 531.228 L285.8738 529.3927 283.6067 529.3927 v280.8646 529.3927 279.1157 531.9405 279.1157 534.6826 c279.1157 537.4246 280.9078 539.9724 283.6067 539.9724 c285.7658 539.9724 287.1261 538.7849 287.7306 536.8849 c286.6079 534.553 284.7295 533.3223 282.1385 533.3223 c281.9658 533.3223 281.7715 533.3223 y281.8578 533.0416 282.2465 531.7678 283.6067 531.7678 cf1 D281.6419 535.2008 m283.5851 535.2008 284.4272 535.7837 285.1613 536.8849 c284.6431 537.5542 283.6067 537.5542 v281.901 537.5542 281.6419 535.2008 yf*U*u0 D296.0461 539.8645 m298.5075 539.1735 L294.5131 529.7166 L292.5267 529.7166 L288.5324 539.1735 L290.9938 539.8645 L293.5199 533.2144 L296.0461 539.8645 lf*U*u303.9937 531.7678 m305.5051 531.7678 306.196 532.6098 y307.5779 531.228 L306.2608 529.3927 303.9937 529.3927 v301.2517 529.3927 299.5028 531.9405 299.5028 534.6826 c299.5028 537.4246 301.2948 539.9724 303.9937 539.9724 c306.1529 539.9724 307.5131 538.7849 308.1177 536.8849 c306.9949 534.553 305.1165 533.3223 302.5255 533.3223 c302.3528 533.3223 302.1585 533.3223 y302.2449 533.0416 302.6335 531.7678 303.9937 531.7678 cf1 D302.0289 535.2008 m303.9721 535.2008 304.8142 535.7837 305.5483 536.8849 c305.0301 537.5542 303.9937 537.5542 v302.288 537.5542 302.0289 535.2008 yf*U*u0 D312.5467 529.7166 m310.0421 529.7166 L310.0421 544.6145 L312.5467 544.6145 L312.5467 529.7166 lf*U*u323.8827 542.6713 m326.56 542.6713 329.0214 540.7929 329.0214 538.1156 c329.0214 535.4383 326.56 533.5598 323.8827 533.5598 c323.1054 533.5598 L323.1054 529.7166 L320.5576 529.7166 L320.5576 542.6713 L323.8827 542.6713 lf1 D323.1054 540.1235 m323.1054 536.1076 L323.8827 536.1076 L325.1566 536.1076 326.4304 536.8417 326.4304 538.1156 c326.4304 539.3894 325.1566 540.1235 323.8827 540.1235 C323.1054 540.1235 lf*U*u0 D338.1366 533.9916 m338.1366 532.5666 338.6548 531.5734 339.7775 530.7098 c337.7048 529.4791 L337.2946 529.7598 336.798 530.4507 336.6468 530.6666 c335.6536 529.3927 333.8831 529.3927 v332.0695 529.3927 330.2558 530.7746 330.2558 532.7394 c330.2558 534.8769 332.199 536.194 334.5309 536.194 c334.8979 536.194 335.6752 536.194 y335.6752 537.1224 335.1354 537.7053 334.0991 537.7053 c333.6456 537.7053 332.9115 537.5758 332.3502 537.1871 c331.4649 539.1519 L332.5013 539.9724 334.0991 539.9724 v336.7764 539.9724 338.1366 538.2667 338.1366 536.086 C338.1366 533.9916 lf1 D335.6752 534.2939 m334.6172 534.2939 334.5309 534.2939 v332.9979 534.2939 332.7604 533.3223 332.7604 532.7394 c332.7604 532.0484 333.4081 531.6814 333.9695 531.6814 c334.9843 531.6814 335.8048 532.6314 y335.6752 533.4519 335.6752 534.2939 vf*U*u0 D346.7111 539.9724 m349.4747 539.9724 351.4179 537.4678 351.4179 534.6826 c351.4179 531.8973 349.2588 529.3927 346.7111 529.3927 c345.4156 529.3927 344.4872 530.2996 y344.4872 524.9665 L342.0258 524.9665 L342.0258 535.3735 L342.0258 536.7985 341.5076 537.7917 340.3849 538.6553 c342.4576 539.886 L342.8462 539.5838 343.5803 538.6122 y344.7247 539.9724 346.7111 539.9724 vf1 D346.7111 531.8541 m348.1145 531.8541 348.9134 533.2791 348.9134 534.6826 c348.9134 536.086 348.1145 537.511 346.7111 537.511 c345.3076 537.511 344.4872 536.086 344.4872 534.6826 c344.4872 533.2791 345.3076 531.8541 346.7111 531.8541 cf*U*u0 D357.1867 531.7678 m358.698 531.7678 359.389 532.6098 y360.7708 531.228 L359.4537 529.3927 357.1867 529.3927 v354.4446 529.3927 352.6957 531.9405 352.6957 534.6826 c352.6957 537.4246 354.4878 539.9724 357.1867 539.9724 c359.3458 539.9724 360.706 538.7849 361.3106 536.8849 c360.1878 534.553 358.3094 533.3223 355.7185 533.3223 c355.5457 533.3223 355.3514 533.3223 y355.4378 533.0416 355.8264 531.7678 357.1867 531.7678 cf1 D355.2219 535.2008 m357.1651 535.2008 358.0071 535.7837 358.7412 536.8849 c358.223 537.5542 357.1867 537.5542 v355.481 537.5542 355.2219 535.2008 yf*U*u0 D366.1715 535.5678 m366.1715 529.7166 L363.7101 529.7166 L363.7101 535.3735 L363.7101 536.7985 363.1919 537.7917 362.0691 538.6553 c364.1419 539.886 L364.5953 539.5406 365.351 538.5042 365.3942 538.4178 c367.0351 539.9724 368.5033 539.9724 v368.9783 537.4031 l367.6397 537.4678 366.1715 535.5678 yf*U*u379.3461 529.7166 m376.3867 529.7166 L376.3867 541.4524 L379.3461 541.4524 L379.3461 529.7166 lf*U-4014 395.5 m4626 395.5 L(N) *331.75 4716 m331.75 -3924 L(N) *257.75 4716 m257.75 -3924 L(N) *u0 R0.56 0 1 0 (PANTONE 376 CV) 0 X0.35 w294.75 677.5209 m294.75 664.8542 lS301.0834 671.1876 m288.4167 671.1876 lSUu100.4792 483.3541 m100.4792 470.6875 lS106.8125 477.0208 m94.1459 477.0208 lSUu294.7708 288.8958 m294.7708 276.2292 lS301.1042 282.5625 m288.4375 282.5625 lSUu489.0834 483.3541 m489.0834 470.6875 lS495.4167 477.0208 m482.75 477.0208 lSU1 Ap1 G7.5332 w270.7999 441.4026 m289.6153 460.1243 281.2908 482.9372 264.3025 500.0102 c247.3141 517.0834 233.4344 521.9392 211.9424 500.554 c188.666 477.3934 199.6894 466.1442 216.6777 449.0709 c233.6659 431.9978 251.9845 422.6809 270.7999 441.4026 csu0 Ap0 O1 g4.72 w430.3967 425.6841 m424.5629 418.4421 408.8499 418.2517 v396.7489 418.1052 391.0811 417.6589 388.5456 415.9293 c384.6809 413.2927 384.3018 408.684 384.7696 404.4439 c384.9564 402.7526 385.2613 396.3249 400.8177 395.4759 c422.6637 394.2835 430.7114 402.2412 y396.3216 391.2462 388.5456 402.3984 v386.3458 405.5537 386.081 410.9056 390.7484 414.0411 c396.7323 418.0612 425.6766 412.6252 430.3967 425.6841 cb432.9139 439.3722 m428.5109 457.9486 382.8816 476.1884 v364.6362 483.4816 370.6095 494.4785 376.2736 496.0125 c381.816 497.5135 401.2897 501.6766 422.5299 482.7965 c395.2347 500.0602 377.3356 493.6525 v370.6514 491.2595 374.2323 484.5382 376.0376 482.7965 c382.7636 476.3064 429.6099 463.4443 432.9139 439.3722 cb375.8016 503.2499 m368.1079 513.8055 376.2736 515.0499 v388.1771 516.8639 400.3438 514.4273 412.1458 510.6446 c424.4179 506.7112 434.802 500.7326 y402.3912 512.3752 390.1191 513.1619 v377.2402 513.9874 375.959 513.1619 375.015 511.2739 c373.7861 508.8162 375.8016 503.2499 yb438.3324 517.5659 m434.1283 520.6962 424.3537 522.6212 416.6831 522.9643 c406.5116 523.4191 406.6372 517.9588 y406.4699 518.6862 405.9661 521.7907 407.6659 522.6458 c411.1076 524.3773 417.2385 525.0447 427.7085 522.9722 c438.1783 520.9 438.3324 517.5659 ybU7.5503 w128.3281 437.106 m172.5188 418.2952 169.2603 456.7622 v166.6023 488.1417 154.1562 541.0933 188.1404 522.2131 c222.1246 503.333 213.3311 502.5572 yS1 w294.6667 4716 m294.6667 -3924 L(N) *-4014 671.25 m4626 671.25 L(N) *-4014 477.0625 m4626 477.0625 L(N) *100.4375 4716 m100.4375 -3924 L(N) **u0 O1 g229.7173 377.2937 m226.8737 370.9945 L221.3304 370.9945 L233.1729 395.2554 L239.8321 395.2554 L242.6397 370.9945 L237.2044 370.9945 L236.7005 377.2937 L229.7173 377.2937 lf1 D236.4845 381.2532 m236.0166 386.4725 L235.9086 387.8045 235.8006 389.7481 235.6926 391.2239 c235.5846 391.2239 L234.9727 389.7481 234.2888 387.8764 233.6409 386.4725 c231.2651 381.2532 L236.4845 381.2532 lf*U*u0 D249.8747 395.2554 m255.0581 395.2554 L251.3145 375.5299 L260.6374 375.5299 L259.7735 370.9945 L245.2673 370.9945 L249.8747 395.2554 lf*U*u281.2945 372.1103 m279.4587 371.4985 276.5071 370.7425 273.4474 370.7425 c270.1359 370.7425 267.3642 371.6064 265.3845 373.4062 c263.4407 375.098 262.3248 377.7976 262.3248 380.8932 c262.3248 385.4288 264.1606 389.3522 267.2562 391.9799 c269.9919 394.2476 273.7714 395.5074 277.9829 395.5074 c281.1145 395.5074 283.4542 394.8955 284.3901 394.4275 c282.8423 390.0361 L281.7624 390.5401 279.8546 391.044 277.6949 391.044 c275.2832 391.044 273.1595 390.3601 271.5397 389.1002 c269.416 387.4445 268.0121 384.5648 268.0121 381.2532 c268.0121 377.1857 270.4238 375.134 274.2393 375.134 c275.4632 375.134 276.2911 375.3139 276.903 375.5659 c277.8749 380.6773 L274.0954 380.6773 L274.9233 384.8168 L283.7422 384.8168 L281.2945 372.1103 lf*U*u301.2696 381.3253 m292.6667 381.3253 L291.5509 375.4219 L301.2337 375.4219 L300.3698 370.9945 L285.5036 370.9945 L290.111 395.2554 L304.4732 395.2554 L303.6094 390.828 L294.4665 390.828 L293.4586 385.6806 L302.1335 385.6806 L301.2696 381.3253 lf*U*u308.6095 394.8235 m310.3373 395.1835 312.605 395.3995 314.9807 395.3995 c317.5364 395.3995 319.3722 395.0755 320.992 394.1396 c322.6118 393.3117 323.7996 391.7279 323.7996 389.6761 c323.7996 386.6165 321.5679 384.7088 318.9042 383.953 c318.9042 383.845 L321.2439 383.125 322.7197 381.2173 322.7197 378.5536 c322.7197 375.9259 321.3159 374.0541 319.4082 372.7944 c317.3564 371.3905 314.2968 370.8146 310.2653 370.8146 c307.5296 370.8146 305.3339 370.9945 304.1461 371.2465 C308.6095 394.8235 lf1 D311.9931 385.6087 m313.7209 385.6087 L316.5645 385.6087 318.5083 386.7966 318.5083 388.8842 c318.5083 390.612 317.1044 391.3679 315.1247 391.3679 c314.2248 391.3679 313.4689 391.296 313.0729 391.2239 C311.9931 385.6087 lf309.9053 374.9541 m310.5173 374.882 311.1292 374.882 311.8851 374.882 c314.6927 374.882 317.2484 375.998 317.2484 378.6976 c317.2484 381.1092 315.2327 381.8291 312.821 381.8291 c311.2012 381.8291 L309.9053 374.9541 lf*U*u0 D329.6258 394.7875 m331.2456 395.1835 333.6933 395.3995 336.105 395.3995 c338.4087 395.3995 340.7844 395.0755 342.4762 393.9956 c344.06 393.0597 345.1759 391.548 345.1759 389.2803 c345.1759 385.6806 342.8002 383.449 339.6686 382.4411 c339.6686 382.3331 L341.1084 381.6851 341.7563 380.1013 341.9723 377.9057 c342.2962 375.1701 342.4762 372.0025 342.9082 370.9945 c337.5808 370.9945 L337.3649 371.6425 337.1129 373.7301 336.8969 376.7178 c336.645 379.6694 335.6371 380.5693 333.5853 380.5693 c332.0015 380.5693 L330.2018 370.9945 L325.0904 370.9945 L329.6258 394.7875 lf1 D332.7934 384.4568 m334.9172 384.4568 L337.7248 384.4568 339.7766 386.1486 339.7766 388.5243 c339.7766 390.468 338.1568 391.332 336.069 391.332 c335.0971 391.332 334.4852 391.2599 334.0533 391.152 C332.7934 384.4568 lf*U*u0 D353.0806 377.2937 m350.237 370.9945 L344.6937 370.9945 L356.5362 395.2554 L363.1954 395.2554 L366.003 370.9945 L360.5677 370.9945 L360.0637 377.2937 L353.0806 377.2937 lf1 D359.8478 381.2532 m359.3798 386.4725 L359.2718 387.8045 359.1639 389.7481 359.0559 391.2239 c358.9479 391.2239 L358.336 389.7481 357.6521 387.8764 357.0041 386.4725 c354.6284 381.2532 L359.8478 381.2532 lf*ULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF