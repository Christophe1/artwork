%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(r) 6.0.1%%For: (Lorcan) (  )%%Title: (0036 Rosk E-Logo)%%CreationDate: (24/11/00) (11:07 am)%%BoundingBox: 165 581 411 707%%HiResBoundingBox: 165.9378 581.8823 410.9635 706.3166%%DocumentProcessColors: Cyan Magenta Yellow%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_Illustrator_AI6_vars Adobe_Illustrator_AI6%%+ procset Adobe_Illustrator_AI5 1.0 0%AI5_FileFormat 2.1%AI3_ColorUsage: Color%%CMYKCustomColor: 1 0.5 0 0 (Blue)%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set)%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 ()%AI3_TemplateBox: 306 396 306 396%AI3_TileBox: 30 31 582 761%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -306 828 -1.5 827 581 58 0 1 2 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog% ------------------------------------------------------%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)% ------------------------------------------------------userdict /Adobe_level2_AI5 23 dict dup begin	put% use packed arrays immediately	% packedarray emulation	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def		end		0	} if	pop% activate packing now	userdict /defaultpacking currentpacking put true setpacking% initialize, terminate	% note : no binding loop needed here by design	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{			end		} if	} bind def% mark for later stack clean-up	mark% custom color business	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}	% don't bind 'setcmykcolor in this procedure		def	} if%	new version checks for non-numeric version strings (5.0.1 fix bh 10/25/93)%	/gt38? {version cvx exec} stopped {pop true} {38 gt} ifelse def	%	newer version handles errors on clones with cvx or exec which would leave junk on the stack%	(bh 12/2/93)	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put% test for Level 2 availability	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq		%	halftoneDict level2ScreenFreq screenFreq{	begin		60	% 60 lpi is default		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if	end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		% LEVEL 1+ EMULATIONS (typesetter/color printer extensions)		% cmyk => gray conversion emulation		% note this revision approved by Ed Taft		% for correcting the out of gamut problem		% in our current emulations		% don't bind these guys so 'setgray/currentgray can be overloaded		/setcmykcolor where not		{			% see red book II, pp. 305			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		% LEVEL 2 EMULATIONS		% setoverprint emulation		/setoverprint where not		{			/setoverprint /pop load def		} if		% selectfont emulation		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		% cshow emulation		/cshow where not		{			% {proc} (string)			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if% clean up	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put% *** other separation state tests if we're not on a composite page		composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def		end	} if	end defaultpacking setpacking%%EndResource% ------------------------------------------------------%%BeginProcSet: Adobe_ColorImage_AI6 1.0 0% ColorImage Emulation and Separation Code for Grayscale, RGB and CMYK images% Version 1.0 12/25/95% Copyright (C) 1995-96% Adobe Systems Incorporated% All Rights Reserved% ------------------------------------------------------userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 17 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin% ------------------------------------------------------% Routine Overview% %	String Iterators%		WalkRGBString (given a single source string, convert each pixel to cmyk and call a proc)%		WalkCMYKString (given a single source string, get the components and call a proc)% %	Level1 Emulator Routines%		StuffRGBIntoGrayString%		RGBToGrayImageProc%		StuffCMYKIntoGrayString %		CMYKToGrayImageProc %		ColorImageCompositeEmulator % %	ColorImage CMYK Separation Hacks (For [Applications] that only support planar images)%		CMYKToSeparatedCMYKImageProc% %	ColorImage and Utility Routines.%		FourEqual%		TestPlateIndex%		colorimage% % ------------------------------------------------------	/initialize{ 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6	{		dup type /arraytype eq		{			dup xcheck			{				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not{	/Adobe_ColorImage_AI6_Vars 14 dict def} ifAdobe_ColorImage_AI6_Vars begin	/channelcount 0 def	/sourcecount 0 def	/sourcearray 4 array def	/plateindex -1 def	/XIMask 0 def	/XIBinary 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIBuffer null def	/XIDataProc null defend/WalkRGBString null def/WalkCMYKString null def/StuffRGBIntoGrayString null def/RGBToGrayImageProc null def/StuffCMYKIntoGrayString null def/CMYKToGrayImageProc null def/ColorImageCompositeEmulator null def/SeparateCMYKImageProc null def/FourEqual null def/TestPlateIndex null def% define _colorimage if it doesn't already existcurrentdict /_colorimage known not{	/colorimage where	{		% sourcedictionary (systemdict or a separation proc redefinition)		/colorimage get /_colorimage exch def	}	{		/_colorimage null def	} ifelse} if/_currenttransfer systemdict /currenttransfer get def/colorimage null def/XI null def% ------------------------------------------------------% rgb proc out --WalkRGBString--% ------------------------------------------------------/WalkRGBString{	% rgb proc out	0 3 index	% rgb proc out outindex rgb	dup length 1 sub 0 3 3 -1 roll	{		% rgb proc out outindex rgb index		3 getinterval { } forall		% call the stuff proc		% rgb proc out outindex r g b		5 index exec		% push rgb for the next loop iteration		% rgb proc out outindex		3 index		% rgb proc out outindex rgb	} for		% clean up the stack	% rgb proc out outindex rgb	 5 { pop } repeat} def% ------------------------------------------------------% cmyk proc gray --WalkCMYKString--% ------------------------------------------------------/WalkCMYKString{	% cmyk proc gray	0 3 index	% cmyk proc gray grayindex cmyk	dup length 1 sub 0 4 3 -1 roll	{		% cmyk proc gray grayindex cmyk index		4 getinterval { } forall				% cmyk proc gray grayindex c m y k		6 index exec				% cmyk proc gray grayindex		3 index				% cmyk proc gray grayindex cmyk	} for		% clean up the stack	% cmyk proc gray grayindex cmyk	5 { pop } repeat	} def% ------------------------------------------------------% gray grayindex r g b --StuffRGBIntoGrayString-- gray grayindex% ------------------------------------------------------/StuffRGBIntoGrayString{	% gray grayindex r g b	.11 mul exch		% gray grayindex r bk g	.59 mul add exch		% gray grayindex bkgk r	.3 mul add		% gray grayindex k	cvi 3 copy put		% gray grayindex k	pop 1 add} def% ------------------------------------------------------% --RGBToGrayImageProc-- string% ------------------------------------------------------/RGBToGrayImageProc{		Adobe_ColorImage_AI6_Vars begin			% call the source proc to get the chunky rgb string		sourcearray 0 get exec		% make a grayscale string of the same pixel count (ouch, pull me out of this loop)		% rgb		dup length 3 idiv string		% roll off a copy of the gray string		% rgb gray		dup 3 1 roll 				% push the stuff proc that we want called by WalkRGBString		% gray rgb gray		/StuffRGBIntoGrayString load exch		% call the rgb conversion iterator		% gray rgb proc gray		WalkRGBString		% return the gray string		% gray		end} def% ------------------------------------------------------% gray grayindex c m y k --StuffCMYKIntoGrayString-- gray grayindex% ------------------------------------------------------/StuffCMYKIntoGrayString{	% gray grayindex c m y k	exch .11 mul add		% gray grayindex c m yk	exch .59 mul add		% gray grayindex c mkyk	exch .3 mul add		% pin k to 255	% gray gray index k	dup 255 gt { pop 255 } if		% gray grayindex k	255 exch sub cvi 3 copy put		% gray grayindex k	pop 1 add} def% ------------------------------------------------------% --CMYKToGrayImageProc-- string% ------------------------------------------------------/CMYKToGrayImageProc{		Adobe_ColorImage_AI6_Vars begin		% call the source proc to get the chunky cmyk string		sourcearray 0 get exec		% make a grayscale string of the same pixel count (ouch, pull me out of this loop)		% cmyk		dup length 4 idiv string		% roll off a copy of the gray string		% cmyk gray		dup 3 1 roll 				% push the stuff proc that we want called by WalkCMYKString		% gray cmyk gray		/StuffCMYKIntoGrayString load exch		% call the cmyk iterator		% gray cmyk proc gray		WalkCMYKString		% return the gray string		% gray	end} def% ------------------------------------------------------% width height bitsperpixel matrix firstsource...lastsource multiplesources channelcount --ColorImageCompositeEmulator--% ------------------------------------------------------/ColorImageCompositeEmulator{	% Channelcount is already saved in Adobe_ColorImage_AI6_Vars. Our data is always in chunky form so punt if someone	% calls colorimage on a level 1 device with planar data.	% channelcount and multiplesources are already saved in Adobe_ColorImage_AI6_Vars. The image operator isn't going to use them.	pop true eq	{		% pop off the parameters and return		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat	}	{		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne		{			Adobe_ColorImage_AI6_Vars begin				% save off the original chunky source function				sourcearray 0 3 -1 roll put							% push the appropriate cover proc				channelcount 3 eq 				{ 					/RGBToGrayImageProc 				}				{ 					/CMYKToGrayImageProc				} ifelse				load			end		} if		image	} ifelse} def% ------------------------------------------------------% --SeparateCMYKImageProc-- string% ------------------------------------------------------/SeparateCMYKImageProc{		Adobe_ColorImage_AI6_Vars begin		sourcecount 0 ne		{			% planar case: call the source proc for the current plate and return its result			sourcearray plateindex get exec		}		{						% call the source proc to get the chunky cmyk string			sourcearray 0 get exec						% make a grayscale string of the same pixel count (ouch, pull me out of this loop)			% cmyk			dup length 4 idiv string						% cmyk			0 2 index						% cmyk gray grayindex cmyk			plateindex 4 2 index length 1 sub			{				% cmyk gray grayindex cmyk channelindex				get 255 exch sub								% cmyk gray grayindex grayvalue				3 copy put pop 1 add								% cmyk gray grayindex				2 index			} for			% return the gray string			% cmyk gray grayindex cmyk			pop pop exch pop		} ifelse	end} def	% ------------------------------------------------------% s1 s2 s3 s4 c1 c2 c3 c4 --FourEqual--% ------------------------------------------------------/FourEqual{	% s1 s2 s3 s4 c1 c2 c3 c4	4 index ne	{		pop pop pop false	}	{		% s1 s2 s3 s4 c1 c2 c3		4 index ne		{			pop pop false		}		{			% s1 s2 s3 s4 c1 c2			4 index ne			{				pop false			}			{				% s1 s2 s3 s4 c1				4 index eq			} ifelse		} ifelse	} ifelse} def% ------------------------------------------------------%  --TestPlateIndex-- plateindex% ------------------------------------------------------/TestPlateIndex{	Adobe_ColorImage_AI6_Vars begin		% assume we're not separating		/plateindex -1 def		/setcmykcolor where		{			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			% cyan plate?			1 0 0 0 FourEqual 			{ 				/plateindex 0 def			}			{				% magenta plate?				0 1 0 0 FourEqual				{ 					/plateindex 1 def				}				{					% yellow plate?					0 0 1 0 FourEqual					{						/plateindex 2 def					}					{						% black plate						0 0 0 1 FourEqual						{ 							/plateindex 3 def						}						{							0 0 0 0 FourEqual							{								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex	end} def% ------------------------------------------------------% width height bitsperpixel matrix firstsource...lastsource multiplesources channelcount --colorimage--% ------------------------------------------------------/colorimage{	Adobe_ColorImage_AI6_Vars begin		/channelcount 1 index def		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def		% setup for following if statement		4 sourcecount add index dup 		8 eq exch 1 eq or not	end		% is this not 1 or 8 bit?	{		% Call the original proc if the image is at a weird bit depth. This will display a composite if we're separating, but too bad.		/_colorimage load null ne		{			% call the original (they probably punt if we're separating)			_colorimage		}		{			% pop off the parameters and return			Adobe_ColorImage_AI6_Vars /sourcecount get			7 add { pop } repeat		} ifelse	}	{		% Call the saved colorimage operator if this an rgb, we're printing a composite or we're separating		% an image to a custom plate. The last case assumes that the separation procs surrounding us		% take care of punching out		dup 3 eq		TestPlateIndex		dup -1 eq exch 5 eq or or		{			% Call the colorimage emulator if we're printing to a level 1 device			/_colorimage load null eq			{				ColorImageCompositeEmulator			}			{				% call image if this is a grayscale so that Quark doesn't die on custom plates				dup 1 eq				{					pop pop image				}				{					% draw to the null device if we're on a custom plate					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq					{						gsave												% stolen from PhotoShop						0 _currenttransfer exec						1 _currenttransfer exec						eq						{ 0 _currenttransfer exec 0.5 lt }						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse												% push the appropriate transfer proc (first case is negative						% second case is positive) and call settransfer						{ { pop 0 } } { { pop 1 } } ifelse						systemdict /settransfer get exec					} if										_colorimage										% restore from the null device if necessary					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq					{						grestore					} if				} ifelse			} ifelse		}		{			% Are we separating a grayscale image?			dup 1 eq			{				% let the surrounding separation procset handle the separation				pop pop				image			}			{				% pop channelcount and multiplesources since they're not used by the image operator				pop pop				% Prepare to call the image operator with a cover proc				Adobe_ColorImage_AI6_Vars begin					% save off the source procs for our cover proc					% width height bitsperpixel matrix firstsource...lastsource					sourcecount -1 0					{									% width height bitsperpixel matrix firstsource...lastsource index						exch sourcearray 3 1 roll put					} for					/SeparateCMYKImageProc load				end				% bypass the separation procset since some applications don't handle chunky and the				% old separator doesn't handle colorimage				systemdict /image get exec			} ifelse		} ifelse	} ifelse} def% ------------------------------------------------------% --XI--% ------------------------------------------------------/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIMask exch 0 ne def		/XIBinary exch 0 ne def		pop		pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def				XIBitsPerPixel 1 eq		{			XIImageWidth 8 div ceiling cvi		}		{			XIImageWidth XIChannelCount mul		} ifelse		/XIBuffer exch string def				XIBinary		{			/XIDataProc { currentfile XIBuffer readstring pop } def			% skip the %BeginBinary comment			currentfile 128 string readline pop pop		}		{			/XIDataProc { currentfile XIBuffer readhexstring pop } def		} ifelse				0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				XIMask		{			XIImageWidth XIImageHeight			false			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]			/XIDataProc load						% synch the PostScript fill with Illustrator's notion of the current fill			/_lp /null ddef			_fc			/_lp /imagemask ddef						imagemask		}		{			XIImageWidth XIImageHeight			XIBitsPerPixel			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]			/XIDataProc load						% call image if passed grayscale or bitmap data. Some applications			% die if colorimage is called with gray data.			XIChannelCount 1 eq			{				% Some applications refuse to separate a grayscale image to the black plate if				% the currentgray is white. Hack around.								gsave				0 setgray								image								grestore			}			{				false				XIChannelCount				colorimage			} ifelse		} ifelse		grestore	end} def	end%%EndProcSet% ------------------------------------------------------%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)%%Version: 1.1 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)% ------------------------------------------------------currentpacking true setpacking% 71 vars, but leave slack of 10 entries for custom Postscript fragmentsuserdict /Adobe_Illustrator_AI5_vars 81 dict dup beginput% paint operands/_eo false def/_lp /none def/_pf{} def	% paint fill/_ps{} def	% paint stroke/_psf{} def	% paint string fill/_pss{} def	% paint string stroke/_pjsf{} def	% paint justified string fill/_pjss{} def	% paint justified string stroke/_pola 0 def/_doClip 0 def% paint operators/cf currentflat def	% - cf flatness% typography operands/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def	% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)/_ay 0 def	% y character spacing/_cx 0 def	% x word spacing/_cy 0 def	% y word spacing/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def% typography operators/Tx{} def/Tj{} def% compound path operators/CRender{} def% printing/_AI3_savepage{} def% color operands/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def% pattern operands/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def% discard variables (12 total)/discardSave null def	% holds save used in discard loop/buffer 256 string def	% line buffer string : assume 256 chars/line/beginString null def	% begin delimiter/endString null def	% end delimiter/endStringLength null def	% holds buffer size for reading by byte technique/layerCnt 1 def	% internal variables for discard loop/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def% variable for doing clipping without rendering/clipForward? false def% end the vars dictionaryend% =========================================userdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 91 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin% initialization/initialize	% - initialize -{	% pushing main on the stack	Adobe_Illustrator_AI5 dup begin	% push the vars dictionary	Adobe_Illustrator_AI5_vars begin	% at this point the main and vars dictionaries	% are in the state we wish them to be	% on exit from the initialize call	% bind the procedures in the discard dictionary	discardDict	{		bind pop pop	} forall	% begin the nc dictionary	dup /nc get begin	% bind the procs in main	{		% added a test for type = operatortype so procedures like Ln can be defined as an alias for 'pop		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall	% turn off 'nc	end	newpath	% on exit we have main and vars on top of dict stack} def/terminate	% - terminate -{	end	end} def% definition operators/_	% - _ nullnull def/ddef	% key value ddef -{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput	% key value literal xput -{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def	end} def/npop	% integer npop -{	{		pop	} repeat} def% marking operators/sw	% ax ay string sw x y{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj	% cx cy fillchar ax ay string swj x y{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss	% ax ay string matrix ss -{	4 1 roll	{		% matrix ax ay char 0 0 {proc} -		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss	% cx cy fillchar ax ay string matrix jss -{	4 1 roll	{		% cx cy fillchar matrix ax ay char 0 0 {proc} -   		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def% path operators/sp	% ax ay string sp -{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp	% cx cy fillchar ax ay string jsp -{	{		% cx cy fillchar ax ay char 0 0 {proc} -		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def% path construction operators/pl	% x y pl x y{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	% x1 y1 x2 y2 x3 y3 c -	{		curveto	} def	/C	/c load def	/v	% x2 y2 x3 y3 v -	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	% x1 y1 x2 y2 y -	{		2 copy curveto	} def	/Y	/y load def	/l	% x y l -	{		lineto	} def	/L	/l load def	/m	% x y m -	{		moveto	} def}{	% else	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse% graphic state operators/d	% array phase d -{	setdash} def/cf{} def	% - cf flatness/i	% flatness i -{	dup 0 eq	{		pop cf	} if	setflat} def/j	% linejoin j -{	setlinejoin} def/J	% linecap J -{	setlinecap} def/M	% miterlimit M -{	setmiterlimit} def/w	% linewidth w -{	setlinewidth} def% path painting operators/XR	% flag XR -{	0 ne	/_eo exch ddef} def/H	% - H -{} def/h	% - h -{	closepath} def/N	% - N -{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n	% - n -{	N} def/F	% - F -{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f	% - f -{	closepath	F} def/S	% - S -{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s	% - s -{	closepath	S} def/B	% - B -{	_pola 0 eq	{		_doClip 1 eq	% F clears _doClip		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b	% - b -{	closepath	B} def/W	% - W -{	/_doClip 1 ddef} def/*	% - [string] * -{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	% used to call newpath only if _polo was 0; now newpath is called unconditionally (bh 3/24/94)	newpath} def% group operators/u	% - u -{} def/U	% - U -{} def/q	% - q -{	_pola 0 eq	{		gsave	} if} def/Q	% - Q -{	_pola 0 eq	{		grestore	} if} def/*u	% - *u -{	_pola 1 add /_pola exch ddef} def/*U	% - *U -{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D	% polarized D -{	pop} def/*w	% - *w -{} def/*W	% - *W -{} def% place operators/`	% matrix llx lly urx ury string ` -{	/_i save ddef% * special case of clipping forward without rendering	% use 'nulldevice if true	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~	% - ~ -{	end	_i restore} def% color operators/O	% flag O -{	0 ne	/_of exch ddef	/_lp /none ddef} def/R	% flag R -{	0 ne	/_os exch ddef	/_lp /none ddef} def/g	% gray g -{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G	% gray G -{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k	% cyan magenta yellow black k -{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K	% cyan magenta yellow black K -{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x	% cyan magenta yellow black name gray x -{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X	% cyan magenta yellow black name gray X -{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def% locked object operator/A	% value A -{	pop} def% annotate page operator/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def% object tag operator% joe holt November 20, 1994% /name (value) XT/XT {	pop pop} def% begin layer PostScript implementation% general purpose discard loop% works on early level 1 (v.23, v.38) PostScript printers% version 0.02 04/03/93% Bill Woodruff% constraints :% if nested discards must be handled% then the begin and end delimiting% strings must be of equal length% arguments% #nestingFlag% #nestingFlag = 0  				no nesting% #nestingFlag = 1  				nesting% non-nested case% note : since the non-nested case is invoked% after the ocurrence of a beginning string% we only have to look for the ending string% it is not necessary to specify a beginning string% 0 (endString) % nested case% (beginString) 1 (endString) % the discard procedure is defined in the main dictionary% it turns the discard dictionary on to execute the discard function/discard{	% test for version, hash a key	% get and execute the discard procedure from dictionary	% execute it in a stopped context so we can bail with 'stop	% wrap it in a save so we don't have to reset variables	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop	end	discardSave restore} bind def% build the discard dictionary which will contain only proceduresuserdict /discardDict 7 dict dup beginput% pre 38 initialization/pre38Initialize{	% used as buffer size for reading by byte technique		/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	%	new buffer equal in length to end string	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	%	pointer to from 2nd to last char in new buffer	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store	%	pointer to last char in new buffer} def% for <=38	/shiftBuffer{	% shift last chars of newBuff to start of newBuff	newBuff 0 newBuffButFirst putinterval	% new character into last byte of newBuff	newBuffLast 0	currentfile read not	{	stop	} if	put} def% discard procedures% no nesting, older ps0{	pre38Initialize	mark	% fill the buffer	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def% nesting, older ps1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def% no nesting, newer ps2{	mark	{		% read a line : exit if end of file reached		currentfile buffer readline not		{		stop		} if		% end of layer ?		endString eq		{			cleartomark stop		} if	} loop} def% nesting, newer ps3{	/beginString exch store	/layerCnt 1 store	mark	{		% read a line : exit if end of file reached		currentfile buffer readline not		{		stop		} if		% start of layer ?		dup beginString eq		{			% update layer counter			pop /layerCnt dup load 1 add store		}		{			% end of layer ?			endString eq			{				% stop if we're not nested				layerCnt 1 eq				{					cleartomark stop				}				{					% nested : decrement layer counter					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} def% end discard dictionaryend% define the dictionary for clipping without renderinguserdict /clipRenderOff 15 dict dup beginput% flag for marking this dictionary as active% so we can test in /` and wrap placed% elements in nulldevice% /clipForward? true def% re-define rendering primitives to clip and newpath% based on value of /_doClip flag{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall% modify 'Tr so Tj and Tx are never set up by% the calls to 'a0, 'e0, etc./Tr /pop load def% special case of 'cshow ?% is so, we'll have to overload toplevels% /patternashow /patternawidthshow% /patternashowstroke% /patternawidthshowstroke% /ss /jss /sp /jsp% perhaps we can bracket out patterns at a higher level ?% for example, by modifying 'E to pop off its parameters% call to 'show in 'patternpath ?% calls to 'ashow in '_psf ?% calls to 'awidthshow in '_pjsf ?% calls to 'widthshow in '_jss and '_jsp ?% disable gradient operators/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} def% end dictionary for clipping without renderingend/Lb	% visible preview enabled printing dimmed masks colorIndex red green blue  ==> Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	% #masks #printing 	% assume that	% masks = 1 masks forward, masks = 0 no masking or only local masking		% do the right thing for printing and masking layer	0 eq	{		% non-printing layer		0 eq		{			% no masking forward from this layer			% nested discard call			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			% masking forward from this layer			% no printing, but clip path must survive						% set the clipForward? flag in the vars dict			/clipForward? true def						% redefine Tx and Tj in the vars dict			/Tx /pop load def			/Tj /pop load def						% turn on the no rendering dictionary			currentdict end clipRenderOff begin begin		} ifelse	}	{		% printing layer		% encapsulate layer with 'save		% only if there is no masking forward		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def% end layer :% assume that if discardSave is non-null% then the layer was bracketed by 'save...restore% else we must test for clipping forward/LB	% ==> Lb ==> .....{	discardSave dup null ne	{		% undo the save		restore	}	{		pop		clipForward?		{			% assume dictionary stack :			%		vars						%		clipRenderOff						%		main			currentdict			end			end			begin			% dictionary stack :			%		vars						%		main								/clipForward? false ddef		} if	} ifelse} bind def% begin palette discard% assume no nesting/Pb	% topLeftCell selected Pb -{	pop pop	% non nested discard	0 (%AI5_EndPalette) discard} bind def% other type of discard% assume no nesting/Np{	0 (%AI5_End_NonPrinting--) discard} bind def% express layer name/Ln /pop load def	% ==> Ln ==> .....% path center-point flag operator/Ap	% value Ap -/pop load def% device-independent flatness/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def% multi-layer clipping/Mb{	q} def/Md{} def/MB{	Q} def% null color operators/nc 3 dict defnc begin/setgray	% gray setgray -{	pop} bind def/setcmykcolor	% cyan magenta yellow black setcmykcolor -{	4 npop} bind def/setcustomcolor	% object tint setcustomcolor -{	2 npop} bind def% exit 'nc dictionarycurrentdict readonly popend% exit main dictionary% currentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetupAdobe_level2_AI5 /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_Begin_NonPrintingNp8 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 7 Bd[<00020406080A0C0E11121416181A1C1E2022242628292B2D2F31333436383A3B3D3F4042444547494A4C4D4F5152545557585A5B5D5E606163646567686A6B6C6E6F70727374767778797B7C7D7E8081828384868788898A8B8C8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFAFB0B1B2B3B4B4B5B6B7B7B8B9BABABBBCBDBDBEBFC0C0C1C2C2C3C4C4C5C6C6C7C7C8C9C9CACBCBCCCCCDCDCECFCFD0D0D1D1D2D2D3D3D4D4D5D5D6D6D7D7D8D8D9D9DADADBDBDCDCDCDDDDDEDEDEDFDFE0E0E0E1E1E2E2E2E3E3E3E4E4E5E5E5E6E6E6E7E7E7E8E8E8E8E9E9E9EAEAEAEAEBEBEBECECECECEDEDEDEDEEEEEEEEEFEFEFEFF0F0F0F0F0F1F1F1F1F1F2F2F2F2F2F3F3F3F3F3F4F4F4F4F4F4F5F5F5F5F5F5F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFBFBFBFBFBFBFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF>0 %_Br<91908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291>0 %_Br<9495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>0 %_Br<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F5051535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F9091929394>0 %_Br<FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFCFCFCFCFCFCFCFCFCFCFCFCFCFCFBFBFBFBFBFBFBFBFBFBFBFBFAFAFAFAFAFAFAFAFAFAF9F9F9F9F9F9F9F9F9F8F8F8F8F8F8F8F8F7F7F7F7F7F7F7F6F6F6F6F6F6F6F5F5F5F5F5F5F5F4F4F4F4F4F4F3F3F3F3F3F3F2F2F2F2F2F2F1F1F1F1F1F0F0F0F0F0EFEFEFEFEFEEEEEEEEEEEDEDEDEDECECECECECEBEBEBEBEAEAEAEAE9E9E9E9E9E8E8E8E8E7E7E7E6E6E6E6E5E5E5E5E4E4E4E4E3E3E3E2E2E2E2E1E1E1E0E0E0DFDFDFDEDEDEDEDDDDDDDCDCDCDBDBDBDADADAD9D9D9D8D8D8D7D7D7D6D6D5D5D5D4D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C6C6C6C5C5C4C4C3C3C2C2C2C1C1C0C0BFBFBEBEBDBDBCBCBBBBBABABAB9B9B8B8B7B7B6B6B5B4B4B3B3B2B2B1B1B0B0AFAFAEAEADADACABABAAAAA9A9A8A8A7A6A6A5A5A4A4A3A2A2A1A1A0A09F9E9E9D9D9C9B9B9A999998989796969594949393929191908F8F8E8D8D8C8B8B8A8989888787868585848382828180807F7E7E7D7C7B7B7A79787877767675747373727170706F6E6D6C6C6B6A696968676665656463626161605F5E5D5D5C5B5A5958585756555453535251504F4E4D4D4C4B4A49484746464544434241403F3E3E3D3C3B3A39383736353433323131302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A090706050403020100>0 %_Br[1 0 50 100 %_Bs0 0 13 80 %_Bs0.57 0 50 57 %_Bs1 0 50 48 %_Bs0.58 0 50 40 %_Bs0 0 50 28 %_Bs1 0 76 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Green & Blue)(Green & Blue) 0 2 Bd[<99999A9A9B9B9B9C9C9D9D9D9E9E9F9F9FA0A0A1A1A1A2A2A3A3A3A4A4A5A5A5A6A6A7A7A7A8A8A9A9A9AAAAABABABACACADADADAEAEAFAFAFB0B0B1B1B1B2B2B3B3B3B4B4B5B5B5B6B6B7B7B7B8B8B9B9B9BABABBBBBBBCBCBDBDBDBEBEBFBFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C5C6C6C7C7C7C8C8C9C9C9CACACBCBCBCCCCCDCDCDCECECFCFCFD0D0D1D1D1D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDDDDDDDEDEDFDFDFE0E0E1E1E1E2E2E3E3E3E4E4E5E5E5E6E6E7E7E7E8E8E9E9E9EAEAEBEBEBECECEDEDEDEEEEEFEFEFF0F0F1F1F1F2F2F3F3F3F4F4F5F5F5F6F6F7F7F7F8F8F9F9F9FAFAFBFBFBFCFCFDFDFDFEFEFFFF><000102020304050506070808090A0B0B0C0D0E0E0F101111121314141516171718191A1A1B1C1D1D1E1F20202122232324252626272829292A2B2C2C2D2E2F2F303132323334353536373838393A3B3B3C3D3E3E3F404141424344444546474748494A4A4B4C4D4D4E4F50505152535354555656575859595A5B5C5C5D5E5F5F606162626364656566676868696A6B6B6C6D6E6E6F707171727374747576777778797A7A7B7C7D7D7E7F80808182828384858586878888898A8B8B8C8D8E8E8F909191929394949596979798999A9A9B9C9D9D9E9FA0A0A1A2A3A3A4A5A6A6A7A8A9A9AAABACACADAEAFAFB0B1B2B2B3B4B5B5B6B7B8B8B9BABBBBBCBDBEBEBF><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br[1 0.75 0 0 1 50 100 %_Bs0.6 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Pink, Yellow, Green)(Pink, Yellow, Green) 0 3 Bd[<0000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010202020202020202020202020202020202020202020203030303030303030303030303030303030303030304040404040404040404040404040404040404040505050505050505050505050505050505050506060606060606060606060606060606060606070707070707070707070707070707070707080808080808080808080808080808080809090909090909090909090909090909090A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D><050506060606070708080809090A0A0A0B0B0C0C0D0D0E0E0F0F101011111212131314141515161717181819191A1A1B1C1C1D1D1E1F1F202021222223232425252626272828292A2A2B2C2C2D2D2E2F2F3031313233333435353637373839393A3B3B3C3D3E3E3F4040414242434445454647474849494A4B4C4C4D4E4F4F505151525354545556575758595A5A5B5C5C5D5E5F5F606162636364656666676869696A6B6C6C6D6E6F707071727373747576777778797A7B7B7C7D7E7F7F8081828383848586878788898A8B8B8C8D8E8F8F9091929394949596979898999A9B9C9D9D9E9FA0A1A2A2A3A4A5A6A7A7A8A9AAABACADADAEAFB0B1B2B2><CCCCCBCBCBCACACAC9C9C8C8C7C7C6C6C5C5C4C4C3C2C2C1C1C0C0BFBEBEBDBDBCBBBBBAB9B9B8B7B7B6B6B5B4B4B3B2B1B1B0AFAFAEADADACABAAAAA9A8A8A7A6A5A5A4A3A2A2A1A0A09F9E9D9C9C9B9A999998979696959493929291908F8E8E8D8C8B8A8A8988878686858483828181807F7E7D7C7C7B7A7978777776757473727171706F6E6D6C6B6A6A69686766656463636261605F5E5D5C5B5B5A59585756555453525151504F4E4D4C4B4A49484746464544434241403F3E3D3C3B3A39383837363534333231302F2E2D2C2B2A29282726252423222221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br<737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5B5A59585756555453525150504F4E4D4C4B4A4949484746454443434241403F3E3E3D3C3B3A3A393837363635343333323130302F2E2D2D2C2B2A2A29282827262525242323222121201F1F1E1D1D1C1C1B1A1A19181817171616151414131312121111100F0F0E0E0D0D0C0C0C0B0B0A0A090908080807070606060505050404040303030202020201010101010000000000><00000000000000000000000001010101010101010101010101010101010101010101010102020202020202020202020202020202020202020202020202020303030303030303030303030303030303030303030303030303030303030304040404040404040404040404040404040404040404040404040404040404040404040404050505050505050505050505050505050505050505050505050505050505050505050505050505050505><BFBFBFC0C0C0C0C0C0C0C0C0C1C1C1C1C1C1C1C1C1C2C2C2C2C2C2C2C2C2C2C3C3C3C3C3C3C3C3C3C3C4C4C4C4C4C4C4C4C4C4C5C5C5C5C5C5C5C5C5C5C5C6C6C6C6C6C6C6C6C6C6C6C6C7C7C7C7C7C7C7C7C7C7C7C7C8C8C8C8C8C8C8C8C8C8C8C8C8C9C9C9C9C9C9C9C9C9C9C9C9C9C9C9CACACACACACACACACACACACACACACACACBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC>01 %_Br[0.05 0.7 0 0 1 50 100 %_Bs0 0.02 0.8 0 1 57 36 %_Bs0.45 0 0.75 0 1 37 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Rainbow)(Rainbow) 0 6 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>1001 %_Br1<0708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>001 %_Br1<00000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010101010102020202020202020202020202020202020202020202020202020202020202020202020203030303030303030303030303030303030303030303030303030303030303030303030304040404040404040404040404040404040404040404040404040404040404040404040405050505050505050505050505050505050505050505050505050505050505050505050506060606060606060606060606060606060606060606060606060606060606060606060607070707070707070707070707070707070707070707><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>0101 %_Br0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>101 %_Br[0 1 0 0 1 50 100 %_Bs1 1 0 0 1 50 80 %_Bs1 0.0279 0 0 1 50 60 %_Bs1 0 1 0 1 50 40 %_Bs0 0 1 0 1 50 20 %_Bs0 1 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (screen)(screen) 0 3 Bd[0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A><CCCCCCCDCDCDCDCDCECECECECECFCFCFCFD0D0D0D0D0D1D1D1D1D1D2D2D2D2D2D3D3D3D3D3D4D4D4D4D5D5D5D5D5D6D6D6D6D6D7D7D7D7D7D8D8D8D8D8D9D9D9D9DADADADADADBDBDBDBDBDCDCDCDCDCDDDDDDDDDDDEDEDEDEDFDFDFDFDFE0E0E0E0E0E1E1E1E1E1E2E2E2E2E2E3E3E3E3E4E4E4E4E4E5E5E5E5E5E6E6E6E6E6E7E7E7E7E7E8E8E8E8E9E9E9E9E9EAEAEAEAEAEBEBEBEBEBECECECECECEDEDEDEDEEEEEEEEEEEFEFEFEFEFF0F0F0F0F0F1F1F1F1F1F2F2F2F2F3F3F3F3F3F4F4F4F4F4F5F5F5F5F5F6F6F6F6F6F7F7F7F7F8F8F8F8F8F9F9F9F9F9FAFAFAFAFAFBFBFBFBFBFCFCFCFCFDFDFDFDFDFEFEFEFEFEFFFFFF>01 %_Br<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><8080808181828283838484858586868787888889898A8A8B8B8C8C8D8D8E8E8F8F90909191929293939494959596969797989899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A5A5A6A6A7A7A8A8A9A9AAAAABABACACADADAEAEAFAFB0B0B1B1B2B2B3B3B4B4B5B5B6B6B7B7B8B8B9B9BABABBBBBCBCBDBDBEBEBFBFC0C0C1C1C2C2C3C3C4C4C5C5C6C6C7C7C8C8C9C9CACACBCBCCCCCDCDCECECFCFD0D0D1D1D2D2D3D3D4D4D5D5D6D6D7D7D8D8D9D9DADADBDBDCDCDDDDDEDEDFE0E0E1E1E2E2E3E3E4E4E5E5E6E6E7E7E8E8E9E9EAEAEBEBECECEDEDEEEEEFEFF0F0F1F1F2F2F3F3F4F4F5F5F6F6F7F7F8F8F9F9FAFAFBFBFCFCFDFDFEFEFFFF><0001020203040506060708090A0A0B0C0D0E0E0F1011121213141516161718191A1A1B1C1D1E1E1F2021222223242526262728292A2A2B2C2D2E2E2F3031323233343536363738393A3A3B3C3D3E3E3F4041424243444546464748494A4A4B4C4D4E4E4F5051525253545556565758595A5A5B5C5D5E5E5F6061626263646566666768696A6A6B6C6D6E6E6F7071727273747576767778797A7A7B7C7D7E7E7F8081828283848586868788898A8A8B8C8D8E8E8F9091929293949596969798999A9A9B9C9D9E9E9FA0A1A2A2A3A4A5A6A6A7A8A9AAAAABACADAEAEAFB0B1B2B2B3B4B5B6B6B7B8B9BABABBBCBDBEBEBFC0C1C2C2C3C4C5C6C6C7C8C9CACACBCC>01 %_Br[0 0.04 1 0 1 50 100 %_Bs0 1 0.8 0 1 50 50 %_Bs1 0.5 0 0 (Blue) 0 3 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Steel Bar)(Steel Bar) 0 3 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>0 %_Br[0 0 50 100 %_Bs1 0 50 70 %_Bs0 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Orange Radial)(Yellow & Orange Radial) 1 2 Bd[0<0001010203040506060708090A0B0C0C0D0E0F10111213131415161718191A1B1C1D1D1E1F202122232425262728292A2B2B2C2D2E2F303132333435363738393A3B3C3D3E3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F60606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C><FFFFFFFFFEFEFEFEFEFEFEFDFDFDFDFDFDFCFCFCFCFCFCFBFBFBFBFBFBFAFAFAFAFAFAF9F9F9F9F9F9F8F8F8F8F8F8F7F7F7F7F7F7F6F6F6F6F6F6F5F5F5F5F5F5F4F4F4F4F4F3F3F3F3F3F3F2F2F2F2F2F2F1F1F1F1F1F0F0F0F0F0F0EFEFEFEFEFEFEEEEEEEEEEEDEDEDEDEDEDECECECECECEBEBEBEBEBEBEAEAEAEAEAE9E9E9E9E9E9E8E8E8E8E8E8E7E7E7E7E7E6E6E6E6E6E5>01 %_Br[0 0 1 0 1 52 19 %_Bs0 0.55 0.9 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Purple Radial)(Yellow & Purple Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 14 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.46 0 1 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc1 0.1 0 0 kPc0.75 0.75 0 0 kPc0.46 0 1 0 kPcBb2 (Pink, Yellow, Green) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Purple Radial) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPcBb2 (Rainbow) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.21 0 0.59 0 kPc0.46 0 1 0 kPcBb2 (Steel Bar) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPcBb2 (screen) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPcBb2 (Green & Blue) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPcBb0 0 0 0 Bh2 (Yellow & Orange Radial) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 Au*u0 O1 0.1 0 0 k800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR166.2202 704.4199 m170.9192 705.2134 177.8846 705.8125 185.6677 705.8125 c195.2679 705.8125 201.9936 704.3474 206.6128 700.6847 c210.4768 697.6179 212.6024 693.0691 212.6024 687.1172 c212.6024 678.9191 206.7409 673.2069 201.1772 671.211 c201.1772 670.9058 L205.6669 669.0929 208.1933 664.8015 209.8249 658.8541 c211.8247 651.53 213.7781 643.0943 215.0475 640.5869 c200.0656 640.5869 L199.0711 642.4596 197.4568 647.662 195.615 655.6729 c193.812 663.7623 191.0948 665.9229 185.0718 665.9994 c180.7202 665.9994 L180.7202 640.5869 L166.2202 640.5869 L166.2202 704.4199 lf1 D180.7202 676.5874 m186.4517 676.5874 L193.712 676.5874 198.0545 680.2881 198.0545 685.9137 c198.0545 691.8385 193.9936 694.8679 187.3088 694.906 c183.8052 694.906 181.7519 694.6772 180.7202 694.4153 C180.7202 676.5874 lf*U*u0 D301.7979 655.6926 m305.674 653.6126 311.7618 651.6276 318.0206 651.6276 c324.7417 651.6276 328.3049 654.4177 328.3049 658.6774 c328.3049 662.6517 325.2169 664.994 317.4694 667.7246 c306.6716 671.5538 299.6154 677.4368 299.6154 686.8909 c299.6154 697.9259 308.8809 706.3166 324.0971 706.3166 c331.4776 706.3166 336.8061 704.8505 340.624 703.0598 c337.3893 691.3235 L334.8232 692.5482 330.1638 694.3966 323.8796 694.3966 c317.5078 694.3966 314.4656 691.447 314.4656 688.1378 c314.4656 684.0269 318.0513 682.2091 326.4465 679.0385 c337.9057 674.7554 343.2107 668.8081 343.2107 659.6585 c343.2107 648.8519 334.9368 639.5791 317.1202 639.5791 c309.7848 639.5791 302.4463 641.5743 298.8392 643.6023 C301.7979 655.6926 lf*U*u358.0105 705.3081 m372.5108 705.3081 L372.5108 676.6993 L372.7526 676.6993 L374.1706 679.1493 375.7177 681.4906 377.1948 683.7537 c391.8478 705.3081 L409.8328 705.3081 L388.421 677.7638 L410.9635 640.5869 L393.9314 640.5869 L378.0062 668.4902 L372.5108 661.7227 L372.5108 640.5869 L358.0105 640.5869 L358.0105 705.3081 lf*U1 Ap0.46 0 1 0 k277.4739 693.2926 m266.259 704.5083 248.0762 704.5083 236.8609 693.2926 c225.6467 682.0788 225.6467 663.8954 236.8609 652.6811 c248.0762 641.4662 266.259 641.4662 277.4739 652.6811 c288.6881 663.8954 288.6881 682.0788 277.4739 693.2926 cf0 Ap1 g0.5 w274.8954 670.9403 m255.0768 671.3821 L264.6626 654.0652 L265.1533 658.7798 267.0837 662.5855 V282.9932 652.9381 L284.3161 655.1203 L268.4323 664.7525 L270.9601 668.152 274.8954 670.9403 Yfu*u0.46 0 1 0 k1 w172.7226 606.6351 m172.911 601.5558 176.8416 599.3362 181.3779 599.3362 c184.6378 599.3362 186.9704 599.8473 189.1125 600.6347 c190.1617 595.7565 L187.7616 594.7385 184.4349 593.9781 180.367 593.9781 c171.2676 593.9781 165.9378 599.6 165.9378 608.1881 c165.9378 615.9228 170.6301 623.2422 179.6443 623.2422 c188.7544 623.2422 191.7203 615.752 191.7203 609.6111 c191.7203 608.2934 191.6056 607.2391 191.4701 606.6351 C172.7226 606.6351 lf1 D185.0475 611.5748 m185.0785 614.1706 183.9498 618.4045 179.2026 618.4045 c174.841 618.4045 173.0263 614.4425 172.7109 611.5748 C185.0475 611.5748 lf*U*u75 w0 D209.3912 612.3458 m209.3912 607.4687 L198.0133 607.4687 L198.0133 612.3458 L209.3912 612.3458 lf*U*u1 0.1 0 0 k1 w215.7843 601.1007 m217.3486 600.1325 220.3985 599.0555 222.9355 599.0555 c226.0534 599.0555 227.4461 600.3634 227.4461 602.2017 c227.4461 604.0999 226.2899 605.0628 222.8438 606.2876 c217.3581 608.1663 215.073 611.1516 215.0976 614.4722 c215.0976 619.4008 219.1934 623.2422 225.733 623.2422 c228.8211 623.2422 231.5225 622.4712 233.1665 621.5682 c231.7614 616.5935 L230.5822 617.2617 228.3143 618.2057 225.8337 618.2057 c223.313 618.2057 221.9089 616.9617 221.9089 615.2376 c221.9089 613.4587 223.2601 612.6039 226.8016 611.3117 c231.9021 609.5086 234.2554 606.9073 234.28 602.7764 c234.28 597.6646 230.2987 593.9781 222.8979 593.9781 c219.5063 593.9781 216.4225 594.79 214.3591 595.9414 C215.7843 601.1007 lf*U*u244.86 622.6089 m249.9124 607.5854 L250.4705 605.8491 251.0776 603.7084 251.4913 602.1511 c251.6555 602.1511 L252.094 603.7246 252.617 605.8343 253.1425 607.6434 c257.5316 622.6089 L265.0892 622.6089 L258.0688 603.4837 L254.222 593.022 251.6221 588.3734 248.3209 585.4652 c245.5353 583.0372 242.6502 582.1146 240.8886 581.8823 c239.2899 587.8484 L240.4769 588.1453 241.9607 588.782 243.3823 589.7816 c244.7312 590.6676 246.2949 592.3233 247.2732 594.2513 c247.5527 594.7349 247.7189 595.1478 247.7189 595.495 c247.7189 595.8032 247.6408 596.2164 247.347 596.876 c237.0485 622.6089 L244.86 622.6089 lf*U*u268.7021 601.1007 m270.2664 600.1325 273.3163 599.0555 275.8533 599.0555 c278.9712 599.0555 280.3639 600.3634 280.3639 602.2017 c280.3639 604.0999 279.2077 605.0628 275.7616 606.2876 c270.2759 608.1663 267.9908 611.1516 268.0154 614.4722 c268.0154 619.4008 272.1112 623.2422 278.6508 623.2422 c281.7389 623.2422 284.4403 622.4712 286.0843 621.5682 c284.6792 616.5935 L283.5 617.2617 281.2321 618.2057 278.7515 618.2057 c276.2308 618.2057 274.8267 616.9617 274.8267 615.2376 c274.8267 613.4587 276.1779 612.6039 279.7194 611.3117 c284.8199 609.5086 287.1732 606.9073 287.1977 602.7764 c287.1977 597.6646 283.2165 593.9781 275.8157 593.9781 c272.4241 593.9781 269.3403 594.79 267.2769 595.9414 C268.7021 601.1007 lf*U*u301.461 629.8108 m301.461 622.6089 L308.2032 622.6089 L308.2032 617.3291 L301.461 617.3291 L301.461 604.9618 L301.461 601.532 302.3746 599.7887 305.0855 599.7887 c306.3711 599.7887 307.0345 599.8775 307.838 600.0976 c307.9807 594.7056 L306.9163 594.3069 305.0581 593.9781 302.8234 593.9781 c300.2188 593.9781 298.0496 594.8652 296.7327 596.2876 c295.2103 597.8969 294.5164 600.4761 294.5164 604.1489 c294.5164 617.3291 L290.5167 617.3291 L290.5167 622.6089 L294.5164 622.6089 L294.5164 627.8286 L301.461 629.8108 lf*U*u318.5171 606.6351 m318.7055 601.5558 322.6361 599.3362 327.1724 599.3362 c330.4323 599.3362 332.7649 599.8473 334.907 600.6347 c335.9562 595.7565 L333.5561 594.7385 330.2294 593.9781 326.1615 593.9781 c317.0621 593.9781 311.7324 599.6 311.7324 608.1881 c311.7324 615.9228 316.4246 623.2422 325.4389 623.2422 c334.549 623.2422 337.5148 615.752 337.5148 609.6111 c337.5148 608.2934 337.4002 607.2391 337.2647 606.6351 C318.5171 606.6351 lf1 D330.842 611.5748 m330.8731 614.1706 329.7444 618.4045 324.9971 618.4045 c320.6355 618.4045 318.8208 614.4425 318.5054 611.5748 C330.842 611.5748 lf*U*u0 D343.502 614.2746 m343.502 617.5121 343.3993 620.1818 343.2717 622.6089 c349.3248 622.6089 L349.6492 618.4936 L349.8134 618.4936 L351.166 620.6669 353.7158 623.2422 358.444 623.2422 c362.1557 623.2422 365.0138 621.18 366.2185 618.0738 c366.3337 618.0738 L367.3136 619.6081 368.4931 620.7803 369.7607 621.5947 c371.3569 622.6675 373.1215 623.2422 375.4576 623.2422 c380.0901 623.2422 384.8112 620.0702 384.8112 611.0814 c384.8112 594.5825 L377.8993 594.5825 L377.8993 610.0852 L377.8993 614.7566 376.2821 617.4971 372.9003 617.4971 c370.4762 617.4971 368.7 615.7871 367.9728 613.7664 c367.7465 613.0895 367.6125 612.193 367.6125 611.4005 c367.6125 594.5825 L360.7007 594.5825 L360.7007 610.7885 L360.7007 614.7362 359.1224 617.4971 355.8649 617.4971 c353.2083 617.4971 351.4333 615.4146 350.7657 613.4931 c350.5128 612.7814 350.4138 611.9442 350.4138 611.1499 c350.4138 594.5825 L343.502 594.5825 L343.502 614.2746 lf*U*u392.2754 601.1007 m393.8397 600.1325 396.8896 599.0555 399.4266 599.0555 c402.5445 599.0555 403.9371 600.3634 403.9371 602.2017 c403.9371 604.0999 402.781 605.0628 399.3349 606.2876 c393.8492 608.1663 391.5641 611.1516 391.5886 614.4722 c391.5886 619.4008 395.6845 623.2422 402.2241 623.2422 c405.3121 623.2422 408.0135 622.4712 409.6575 621.5682 c408.2525 616.5935 L407.0733 617.2617 404.8053 618.2057 402.3247 618.2057 c399.8041 618.2057 398.4 616.9617 398.4 615.2376 c398.4 613.4587 399.7512 612.6039 403.2926 611.3117 c408.3931 609.5086 410.7464 606.9073 410.771 602.7764 c410.771 597.6646 406.7897 593.9781 399.3889 593.9781 c395.9974 593.9781 392.9136 594.79 390.8502 595.9414 C392.2754 601.1007 lf*UUULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF