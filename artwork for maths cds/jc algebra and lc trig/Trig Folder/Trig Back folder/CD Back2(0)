%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(r) 6.0.1%%For: (Lorcan) (  )%%Title: (CD Back2\(0\))%%CreationDate: (26/4/01) (11:05 am)%%BoundingBox: 128 534 589 589%%HiResBoundingBox: 128.5061 534.4368 588.6666 588.0373%%DocumentProcessColors: Cyan Magenta Yellow%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_screens_AI5 1.0 0%%+ procset Adobe_Illustrator_AI6_vars Adobe_Illustrator_AI6%%+ procset Adobe_Illustrator_AI5 1.0 0%AI5_FileFormat 2.1%AI3_ColorUsage: Color%AI3_IncludePlacedImages%%CMYKCustomColor: 0 0.7 1 0 (Orange Red)%%+ 0 0.25 1 0 (Orange Yellow)%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set)%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 ()%AI3_TemplateBox: 306 396 306 396%AI3_TileBox: -150 -290.3333 388 490.6667%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 340.1575 340.1575%AI5_RulerUnits: 1%AI5_ArtFlags: 0 0 0 1 0 0 0 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: 98 748 1.5 899 701 58 1 1 2 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog% ------------------------------------------------------%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)% ------------------------------------------------------userdict /Adobe_level2_AI5 23 dict dup begin	put% use packed arrays immediately	% packedarray emulation	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def		end		0	} if	pop% activate packing now	userdict /defaultpacking currentpacking put true setpacking% initialize, terminate	% note : no binding loop needed here by design	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{			end		} if	} bind def% mark for later stack clean-up	mark% custom color business	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}	% don't bind 'setcmykcolor in this procedure		def	} if%	new version checks for non-numeric version strings (5.0.1 fix bh 10/25/93)%	/gt38? {version cvx exec} stopped {pop true} {38 gt} ifelse def	%	newer version handles errors on clones with cvx or exec which would leave junk on the stack%	(bh 12/2/93)	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put% test for Level 2 availability	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq		%	halftoneDict level2ScreenFreq screenFreq{	begin		60	% 60 lpi is default		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if	end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		% LEVEL 1+ EMULATIONS (typesetter/color printer extensions)		% cmyk => gray conversion emulation		% note this revision approved by Ed Taft		% for correcting the out of gamut problem		% in our current emulations		% don't bind these guys so 'setgray/currentgray can be overloaded		/setcmykcolor where not		{			% see red book II, pp. 305			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		% LEVEL 2 EMULATIONS		% setoverprint emulation		/setoverprint where not		{			/setoverprint /pop load def		} if		% selectfont emulation		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		% cshow emulation		/cshow where not		{			% {proc} (string)			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if% clean up	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put% *** other separation state tests if we're not on a composite page		composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def		end	} if	end defaultpacking setpacking%%EndResource% ------------------------------------------------------%%BeginResource: procset Adobe_screens_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)%%Version: 1.2 0%%CreationDate: (03/24/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)% ------------------------------------------------------userdict /defaultpacking currentpacking put true setpackingsystemdict beginuserdict /Adobe_screens_AI5 13 dict dup beginput/initialize{	Adobe_screens_AI5 begin	/screenid		deviceDPI 600 gt composite? not or		{		-1		}		{			deviceDPI currentScreenFreq 			dup dup 60 ge exch 150 le and deviceDPI 300 le and		{			pop 60		} if		div 1.41421 div 0.5 add cvi		} ifelse	def	% (currentscreen parms are: ) print currentscreen pop == ==% (devicedpi= ) print deviceDPI ==% (screenid= ) print screenid ==% (composite?= ) print composite? ==% (vertDPI= ) print 0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt ==	2 screenid eq	{		/customsize 16 def		/customdata /customdata2 def		setcustomscreen	} if		3 screenid eq	{		/customsize 24 def		/customdata /customdata3 def		setcustomscreen	} if		4 screenid eq	{		/customsize 16 def		/customdata /customdata4 def		setcustomscreen	} if		5 screenid eq	{		/customsize 20 def		/customdata /customdata5 def		setcustomscreen	} if		6 screenid eq	{		/customsize 24 def		/customdata /customdata6 def		setcustomscreen	} if		7 screenid eq	{		/customsize 28 def		/customdata /customdata7 def		setcustomscreen	} if		8 screenid eq	{		/customsize 16 def		/customdata /customdata8 def		setcustomscreen	} if} def/terminate{	currentdict Adobe_screens_AI5 eq	{		end	} if} def/setcustomscreen{	deviceDPI customsize div 0	{		1 add 2 div customsize mul cvi exch		1 add 2 div customsize mul cvi exch		customsize mul add		customdata load exch get 256 div	} setscreen} def/customdata2 28 28 mul string defcurrentfile customdata2 readhexstring4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECDF3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD044483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CFF0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000pop pop/customdata3 28 28 mul string defcurrentfile customdata3 readhexstring011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F688AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A125998DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A479336B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A177306989C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A115897DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A336C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB4800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000pop pop/customdata4 28 28 mul string defcurrentfile customdata4 readhexstring1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A32C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4CC38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000pop pop/customdata5 28 28 mul string defcurrentfile customdata5 readhexstring010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B112654A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A9937047334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E092351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B07204EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C29E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9FDAF3E2BA681C07214FA0DBF5E1B8671A000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000pop pop/customdata6 28 28 mul string defcurrentfile customdata6 readhexstring081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A8190ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BDE4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B04071943B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B4864798091AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BEE4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A03061842B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC452280100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000pop pop/customdata7 28 28 mul string defcurrentfile customdata7 readhexstring01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F05122953A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D73372318253A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CEECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D33161E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E4350657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C220D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F64798499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F360E04112952A5CFEDFAF0DBB25E350Epop pop/customdata8 28 28 mul string defcurrentfile customdata8 readhexstring050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F132939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634BB8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADAF0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFCFFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB96775131210B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000pop popendenddefaultpacking setpacking%%EndResource% ------------------------------------------------------%%BeginProcSet: Adobe_ColorImage_AI6 1.0 0% ColorImage Emulation and Separation Code for Grayscale, RGB and CMYK images% Version 1.0 12/25/95% Copyright (C) 1995-96% Adobe Systems Incorporated% All Rights Reserved% ------------------------------------------------------userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 17 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin% ------------------------------------------------------% Routine Overview% %	String Iterators%		WalkRGBString (given a single source string, convert each pixel to cmyk and call a proc)%		WalkCMYKString (given a single source string, get the components and call a proc)% %	Level1 Emulator Routines%		StuffRGBIntoGrayString%		RGBToGrayImageProc%		StuffCMYKIntoGrayString %		CMYKToGrayImageProc %		ColorImageCompositeEmulator % %	ColorImage CMYK Separation Hacks (For [Applications] that only support planar images)%		CMYKToSeparatedCMYKImageProc% %	ColorImage and Utility Routines.%		FourEqual%		TestPlateIndex%		colorimage% % ------------------------------------------------------	/initialize{ 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6	{		dup type /arraytype eq		{			dup xcheck			{				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not{	/Adobe_ColorImage_AI6_Vars 14 dict def} ifAdobe_ColorImage_AI6_Vars begin	/channelcount 0 def	/sourcecount 0 def	/sourcearray 4 array def	/plateindex -1 def	/XIMask 0 def	/XIBinary 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIBuffer null def	/XIDataProc null defend/WalkRGBString null def/WalkCMYKString null def/StuffRGBIntoGrayString null def/RGBToGrayImageProc null def/StuffCMYKIntoGrayString null def/CMYKToGrayImageProc null def/ColorImageCompositeEmulator null def/SeparateCMYKImageProc null def/FourEqual null def/TestPlateIndex null def% define _colorimage if it doesn't already existcurrentdict /_colorimage known not{	/colorimage where	{		% sourcedictionary (systemdict or a separation proc redefinition)		/colorimage get /_colorimage exch def	}	{		/_colorimage null def	} ifelse} if/_currenttransfer systemdict /currenttransfer get def/colorimage null def/XI null def% ------------------------------------------------------% rgb proc out --WalkRGBString--% ------------------------------------------------------/WalkRGBString{	% rgb proc out	0 3 index	% rgb proc out outindex rgb	dup length 1 sub 0 3 3 -1 roll	{		% rgb proc out outindex rgb index		3 getinterval { } forall		% call the stuff proc		% rgb proc out outindex r g b		5 index exec		% push rgb for the next loop iteration		% rgb proc out outindex		3 index		% rgb proc out outindex rgb	} for		% clean up the stack	% rgb proc out outindex rgb	 5 { pop } repeat} def% ------------------------------------------------------% cmyk proc gray --WalkCMYKString--% ------------------------------------------------------/WalkCMYKString{	% cmyk proc gray	0 3 index	% cmyk proc gray grayindex cmyk	dup length 1 sub 0 4 3 -1 roll	{		% cmyk proc gray grayindex cmyk index		4 getinterval { } forall				% cmyk proc gray grayindex c m y k		6 index exec				% cmyk proc gray grayindex		3 index				% cmyk proc gray grayindex cmyk	} for		% clean up the stack	% cmyk proc gray grayindex cmyk	5 { pop } repeat	} def% ------------------------------------------------------% gray grayindex r g b --StuffRGBIntoGrayString-- gray grayindex% ------------------------------------------------------/StuffRGBIntoGrayString{	% gray grayindex r g b	.11 mul exch		% gray grayindex r bk g	.59 mul add exch		% gray grayindex bkgk r	.3 mul add		% gray grayindex k	cvi 3 copy put		% gray grayindex k	pop 1 add} def% ------------------------------------------------------% --RGBToGrayImageProc-- string% ------------------------------------------------------/RGBToGrayImageProc{		Adobe_ColorImage_AI6_Vars begin			% call the source proc to get the chunky rgb string		sourcearray 0 get exec		% make a grayscale string of the same pixel count (ouch, pull me out of this loop)		% rgb		dup length 3 idiv string		% roll off a copy of the gray string		% rgb gray		dup 3 1 roll 				% push the stuff proc that we want called by WalkRGBString		% gray rgb gray		/StuffRGBIntoGrayString load exch		% call the rgb conversion iterator		% gray rgb proc gray		WalkRGBString		% return the gray string		% gray		end} def% ------------------------------------------------------% gray grayindex c m y k --StuffCMYKIntoGrayString-- gray grayindex% ------------------------------------------------------/StuffCMYKIntoGrayString{	% gray grayindex c m y k	exch .11 mul add		% gray grayindex c m yk	exch .59 mul add		% gray grayindex c mkyk	exch .3 mul add		% pin k to 255	% gray gray index k	dup 255 gt { pop 255 } if		% gray grayindex k	255 exch sub cvi 3 copy put		% gray grayindex k	pop 1 add} def% ------------------------------------------------------% --CMYKToGrayImageProc-- string% ------------------------------------------------------/CMYKToGrayImageProc{		Adobe_ColorImage_AI6_Vars begin		% call the source proc to get the chunky cmyk string		sourcearray 0 get exec		% make a grayscale string of the same pixel count (ouch, pull me out of this loop)		% cmyk		dup length 4 idiv string		% roll off a copy of the gray string		% cmyk gray		dup 3 1 roll 				% push the stuff proc that we want called by WalkCMYKString		% gray cmyk gray		/StuffCMYKIntoGrayString load exch		% call the cmyk iterator		% gray cmyk proc gray		WalkCMYKString		% return the gray string		% gray	end} def% ------------------------------------------------------% width height bitsperpixel matrix firstsource...lastsource multiplesources channelcount --ColorImageCompositeEmulator--% ------------------------------------------------------/ColorImageCompositeEmulator{	% Channelcount is already saved in Adobe_ColorImage_AI6_Vars. Our data is always in chunky form so punt if someone	% calls colorimage on a level 1 device with planar data.	% channelcount and multiplesources are already saved in Adobe_ColorImage_AI6_Vars. The image operator isn't going to use them.	pop true eq	{		% pop off the parameters and return		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat	}	{		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne		{			Adobe_ColorImage_AI6_Vars begin				% save off the original chunky source function				sourcearray 0 3 -1 roll put							% push the appropriate cover proc				channelcount 3 eq 				{ 					/RGBToGrayImageProc 				}				{ 					/CMYKToGrayImageProc				} ifelse				load			end		} if		image	} ifelse} def% ------------------------------------------------------% --SeparateCMYKImageProc-- string% ------------------------------------------------------/SeparateCMYKImageProc{		Adobe_ColorImage_AI6_Vars begin		sourcecount 0 ne		{			% planar case: call the source proc for the current plate and return its result			sourcearray plateindex get exec		}		{						% call the source proc to get the chunky cmyk string			sourcearray 0 get exec						% make a grayscale string of the same pixel count (ouch, pull me out of this loop)			% cmyk			dup length 4 idiv string						% cmyk			0 2 index						% cmyk gray grayindex cmyk			plateindex 4 2 index length 1 sub			{				% cmyk gray grayindex cmyk channelindex				get 255 exch sub								% cmyk gray grayindex grayvalue				3 copy put pop 1 add								% cmyk gray grayindex				2 index			} for			% return the gray string			% cmyk gray grayindex cmyk			pop pop exch pop		} ifelse	end} def	% ------------------------------------------------------% s1 s2 s3 s4 c1 c2 c3 c4 --FourEqual--% ------------------------------------------------------/FourEqual{	% s1 s2 s3 s4 c1 c2 c3 c4	4 index ne	{		pop pop pop false	}	{		% s1 s2 s3 s4 c1 c2 c3		4 index ne		{			pop pop false		}		{			% s1 s2 s3 s4 c1 c2			4 index ne			{				pop false			}			{				% s1 s2 s3 s4 c1				4 index eq			} ifelse		} ifelse	} ifelse} def% ------------------------------------------------------%  --TestPlateIndex-- plateindex% ------------------------------------------------------/TestPlateIndex{	Adobe_ColorImage_AI6_Vars begin		% assume we're not separating		/plateindex -1 def		/setcmykcolor where		{			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			% cyan plate?			1 0 0 0 FourEqual 			{ 				/plateindex 0 def			}			{				% magenta plate?				0 1 0 0 FourEqual				{ 					/plateindex 1 def				}				{					% yellow plate?					0 0 1 0 FourEqual					{						/plateindex 2 def					}					{						% black plate						0 0 0 1 FourEqual						{ 							/plateindex 3 def						}						{							0 0 0 0 FourEqual							{								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex	end} def% ------------------------------------------------------% width height bitsperpixel matrix firstsource...lastsource multiplesources channelcount --colorimage--% ------------------------------------------------------/colorimage{	Adobe_ColorImage_AI6_Vars begin		/channelcount 1 index def		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def		% setup for following if statement		4 sourcecount add index dup 		8 eq exch 1 eq or not	end		% is this not 1 or 8 bit?	{		% Call the original proc if the image is at a weird bit depth. This will display a composite if we're separating, but too bad.		/_colorimage load null ne		{			% call the original (they probably punt if we're separating)			_colorimage		}		{			% pop off the parameters and return			Adobe_ColorImage_AI6_Vars /sourcecount get			7 add { pop } repeat		} ifelse	}	{		% Call the saved colorimage operator if this an rgb, we're printing a composite or we're separating		% an image to a custom plate. The last case assumes that the separation procs surrounding us		% take care of punching out		dup 3 eq		TestPlateIndex		dup -1 eq exch 5 eq or or		{			% Call the colorimage emulator if we're printing to a level 1 device			/_colorimage load null eq			{				ColorImageCompositeEmulator			}			{				% call image if this is a grayscale so that Quark doesn't die on custom plates				dup 1 eq				{					pop pop image				}				{					% draw to the null device if we're on a custom plate					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq					{						gsave												% stolen from PhotoShop						0 _currenttransfer exec						1 _currenttransfer exec						eq						{ 0 _currenttransfer exec 0.5 lt }						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse												% push the appropriate transfer proc (first case is negative						% second case is positive) and call settransfer						{ { pop 0 } } { { pop 1 } } ifelse						systemdict /settransfer get exec					} if										_colorimage										% restore from the null device if necessary					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq					{						grestore					} if				} ifelse			} ifelse		}		{			% Are we separating a grayscale image?			dup 1 eq			{				% let the surrounding separation procset handle the separation				pop pop				image			}			{				% pop channelcount and multiplesources since they're not used by the image operator				pop pop				% Prepare to call the image operator with a cover proc				Adobe_ColorImage_AI6_Vars begin					% save off the source procs for our cover proc					% width height bitsperpixel matrix firstsource...lastsource					sourcecount -1 0					{									% width height bitsperpixel matrix firstsource...lastsource index						exch sourcearray 3 1 roll put					} for					/SeparateCMYKImageProc load				end				% bypass the separation procset since some applications don't handle chunky and the				% old separator doesn't handle colorimage				systemdict /image get exec			} ifelse		} ifelse	} ifelse} def% ------------------------------------------------------% --XI--% ------------------------------------------------------/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIMask exch 0 ne def		/XIBinary exch 0 ne def		pop		pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def				XIBitsPerPixel 1 eq		{			XIImageWidth 8 div ceiling cvi		}		{			XIImageWidth XIChannelCount mul		} ifelse		/XIBuffer exch string def				XIBinary		{			/XIDataProc { currentfile XIBuffer readstring pop } def			% skip the %BeginBinary comment			currentfile 128 string readline pop pop		}		{			/XIDataProc { currentfile XIBuffer readhexstring pop } def		} ifelse				0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				XIMask		{			XIImageWidth XIImageHeight			false			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]			/XIDataProc load						% synch the PostScript fill with Illustrator's notion of the current fill			/_lp /null ddef			_fc			/_lp /imagemask ddef						imagemask		}		{			XIImageWidth XIImageHeight			XIBitsPerPixel			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]			/XIDataProc load						% call image if passed grayscale or bitmap data. Some applications			% die if colorimage is called with gray data.			XIChannelCount 1 eq			{				% Some applications refuse to separate a grayscale image to the black plate if				% the currentgray is white. Hack around.								gsave				0 setgray								image								grestore			}			{				false				XIChannelCount				colorimage			} ifelse		} ifelse		grestore	end} def	end%%EndProcSet% ------------------------------------------------------%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)%%Version: 1.1 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)% ------------------------------------------------------currentpacking true setpacking% 71 vars, but leave slack of 10 entries for custom Postscript fragmentsuserdict /Adobe_Illustrator_AI5_vars 81 dict dup beginput% paint operands/_eo false def/_lp /none def/_pf{} def	% paint fill/_ps{} def	% paint stroke/_psf{} def	% paint string fill/_pss{} def	% paint string stroke/_pjsf{} def	% paint justified string fill/_pjss{} def	% paint justified string stroke/_pola 0 def/_doClip 0 def% paint operators/cf currentflat def	% - cf flatness% typography operands/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def	% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)/_ay 0 def	% y character spacing/_cx 0 def	% x word spacing/_cy 0 def	% y word spacing/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def% typography operators/Tx{} def/Tj{} def% compound path operators/CRender{} def% printing/_AI3_savepage{} def% color operands/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def% pattern operands/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def% discard variables (12 total)/discardSave null def	% holds save used in discard loop/buffer 256 string def	% line buffer string : assume 256 chars/line/beginString null def	% begin delimiter/endString null def	% end delimiter/endStringLength null def	% holds buffer size for reading by byte technique/layerCnt 1 def	% internal variables for discard loop/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def% variable for doing clipping without rendering/clipForward? false def% end the vars dictionaryend% =========================================userdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 91 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin% initialization/initialize	% - initialize -{	% pushing main on the stack	Adobe_Illustrator_AI5 dup begin	% push the vars dictionary	Adobe_Illustrator_AI5_vars begin	% at this point the main and vars dictionaries	% are in the state we wish them to be	% on exit from the initialize call	% bind the procedures in the discard dictionary	discardDict	{		bind pop pop	} forall	% begin the nc dictionary	dup /nc get begin	% bind the procs in main	{		% added a test for type = operatortype so procedures like Ln can be defined as an alias for 'pop		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall	% turn off 'nc	end	newpath	% on exit we have main and vars on top of dict stack} def/terminate	% - terminate -{	end	end} def% definition operators/_	% - _ nullnull def/ddef	% key value ddef -{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput	% key value literal xput -{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def	end} def/npop	% integer npop -{	{		pop	} repeat} def% marking operators/sw	% ax ay string sw x y{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj	% cx cy fillchar ax ay string swj x y{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss	% ax ay string matrix ss -{	4 1 roll	{		% matrix ax ay char 0 0 {proc} -		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss	% cx cy fillchar ax ay string matrix jss -{	4 1 roll	{		% cx cy fillchar matrix ax ay char 0 0 {proc} -   		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def% path operators/sp	% ax ay string sp -{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp	% cx cy fillchar ax ay string jsp -{	{		% cx cy fillchar ax ay char 0 0 {proc} -		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def% path construction operators/pl	% x y pl x y{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	% x1 y1 x2 y2 x3 y3 c -	{		curveto	} def	/C	/c load def	/v	% x2 y2 x3 y3 v -	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	% x1 y1 x2 y2 y -	{		2 copy curveto	} def	/Y	/y load def	/l	% x y l -	{		lineto	} def	/L	/l load def	/m	% x y m -	{		moveto	} def}{	% else	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse% graphic state operators/d	% array phase d -{	setdash} def/cf{} def	% - cf flatness/i	% flatness i -{	dup 0 eq	{		pop cf	} if	setflat} def/j	% linejoin j -{	setlinejoin} def/J	% linecap J -{	setlinecap} def/M	% miterlimit M -{	setmiterlimit} def/w	% linewidth w -{	setlinewidth} def% path painting operators/XR	% flag XR -{	0 ne	/_eo exch ddef} def/H	% - H -{} def/h	% - h -{	closepath} def/N	% - N -{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n	% - n -{	N} def/F	% - F -{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f	% - f -{	closepath	F} def/S	% - S -{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s	% - s -{	closepath	S} def/B	% - B -{	_pola 0 eq	{		_doClip 1 eq	% F clears _doClip		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b	% - b -{	closepath	B} def/W	% - W -{	/_doClip 1 ddef} def/*	% - [string] * -{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	% used to call newpath only if _polo was 0; now newpath is called unconditionally (bh 3/24/94)	newpath} def% group operators/u	% - u -{} def/U	% - U -{} def/q	% - q -{	_pola 0 eq	{		gsave	} if} def/Q	% - Q -{	_pola 0 eq	{		grestore	} if} def/*u	% - *u -{	_pola 1 add /_pola exch ddef} def/*U	% - *U -{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D	% polarized D -{	pop} def/*w	% - *w -{} def/*W	% - *W -{} def% place operators/`	% matrix llx lly urx ury string ` -{	/_i save ddef% * special case of clipping forward without rendering	% use 'nulldevice if true	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~	% - ~ -{	end	_i restore} def% color operators/O	% flag O -{	0 ne	/_of exch ddef	/_lp /none ddef} def/R	% flag R -{	0 ne	/_os exch ddef	/_lp /none ddef} def/g	% gray g -{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G	% gray G -{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k	% cyan magenta yellow black k -{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K	% cyan magenta yellow black K -{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x	% cyan magenta yellow black name gray x -{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X	% cyan magenta yellow black name gray X -{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def% locked object operator/A	% value A -{	pop} def% annotate page operator/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def% object tag operator% joe holt November 20, 1994% /name (value) XT/XT {	pop pop} def% begin layer PostScript implementation% general purpose discard loop% works on early level 1 (v.23, v.38) PostScript printers% version 0.02 04/03/93% Bill Woodruff% constraints :% if nested discards must be handled% then the begin and end delimiting% strings must be of equal length% arguments% #nestingFlag% #nestingFlag = 0  				no nesting% #nestingFlag = 1  				nesting% non-nested case% note : since the non-nested case is invoked% after the ocurrence of a beginning string% we only have to look for the ending string% it is not necessary to specify a beginning string% 0 (endString) % nested case% (beginString) 1 (endString) % the discard procedure is defined in the main dictionary% it turns the discard dictionary on to execute the discard function/discard{	% test for version, hash a key	% get and execute the discard procedure from dictionary	% execute it in a stopped context so we can bail with 'stop	% wrap it in a save so we don't have to reset variables	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop	end	discardSave restore} bind def% build the discard dictionary which will contain only proceduresuserdict /discardDict 7 dict dup beginput% pre 38 initialization/pre38Initialize{	% used as buffer size for reading by byte technique		/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	%	new buffer equal in length to end string	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	%	pointer to from 2nd to last char in new buffer	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store	%	pointer to last char in new buffer} def% for <=38	/shiftBuffer{	% shift last chars of newBuff to start of newBuff	newBuff 0 newBuffButFirst putinterval	% new character into last byte of newBuff	newBuffLast 0	currentfile read not	{	stop	} if	put} def% discard procedures% no nesting, older ps0{	pre38Initialize	mark	% fill the buffer	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def% nesting, older ps1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def% no nesting, newer ps2{	mark	{		% read a line : exit if end of file reached		currentfile buffer readline not		{		stop		} if		% end of layer ?		endString eq		{			cleartomark stop		} if	} loop} def% nesting, newer ps3{	/beginString exch store	/layerCnt 1 store	mark	{		% read a line : exit if end of file reached		currentfile buffer readline not		{		stop		} if		% start of layer ?		dup beginString eq		{			% update layer counter			pop /layerCnt dup load 1 add store		}		{			% end of layer ?			endString eq			{				% stop if we're not nested				layerCnt 1 eq				{					cleartomark stop				}				{					% nested : decrement layer counter					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} def% end discard dictionaryend% define the dictionary for clipping without renderinguserdict /clipRenderOff 15 dict dup beginput% flag for marking this dictionary as active% so we can test in /` and wrap placed% elements in nulldevice% /clipForward? true def% re-define rendering primitives to clip and newpath% based on value of /_doClip flag{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall% modify 'Tr so Tj and Tx are never set up by% the calls to 'a0, 'e0, etc./Tr /pop load def% special case of 'cshow ?% is so, we'll have to overload toplevels% /patternashow /patternawidthshow% /patternashowstroke% /patternawidthshowstroke% /ss /jss /sp /jsp% perhaps we can bracket out patterns at a higher level ?% for example, by modifying 'E to pop off its parameters% call to 'show in 'patternpath ?% calls to 'ashow in '_psf ?% calls to 'awidthshow in '_pjsf ?% calls to 'widthshow in '_jss and '_jsp ?% disable gradient operators/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} def% end dictionary for clipping without renderingend/Lb	% visible preview enabled printing dimmed masks colorIndex red green blue  ==> Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	% #masks #printing 	% assume that	% masks = 1 masks forward, masks = 0 no masking or only local masking		% do the right thing for printing and masking layer	0 eq	{		% non-printing layer		0 eq		{			% no masking forward from this layer			% nested discard call			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			% masking forward from this layer			% no printing, but clip path must survive						% set the clipForward? flag in the vars dict			/clipForward? true def						% redefine Tx and Tj in the vars dict			/Tx /pop load def			/Tj /pop load def						% turn on the no rendering dictionary			currentdict end clipRenderOff begin begin		} ifelse	}	{		% printing layer		% encapsulate layer with 'save		% only if there is no masking forward		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def% end layer :% assume that if discardSave is non-null% then the layer was bracketed by 'save...restore% else we must test for clipping forward/LB	% ==> Lb ==> .....{	discardSave dup null ne	{		% undo the save		restore	}	{		pop		clipForward?		{			% assume dictionary stack :			%		vars						%		clipRenderOff						%		main			currentdict			end			end			begin			% dictionary stack :			%		vars						%		main								/clipForward? false ddef		} if	} ifelse} bind def% begin palette discard% assume no nesting/Pb	% topLeftCell selected Pb -{	pop pop	% non nested discard	0 (%AI5_EndPalette) discard} bind def% other type of discard% assume no nesting/Np{	0 (%AI5_End_NonPrinting--) discard} bind def% express layer name/Ln /pop load def	% ==> Ln ==> .....% path center-point flag operator/Ap	% value Ap -/pop load def% device-independent flatness/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def% multi-layer clipping/Mb{	q} def/Md{} def/MB{	Q} def% null color operators/nc 3 dict defnc begin/setgray	% gray setgray -{	pop} bind def/setcmykcolor	% cyan magenta yellow black setcmykcolor -{	4 npop} bind def/setcustomcolor	% object tint setcustomcolor -{	2 npop} bind def% exit 'nc dictionarycurrentdict readonly popend% exit main dictionary% currentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetupAdobe_level2_AI5 /initialize get execAdobe_screens_AI5 /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_Begin_NonPrintingNp10 Bn%AI5_BeginGradient: ( 3)( 3) 0 6 Bd[0<1A1918181717161615151414131312121110100F0F0E0E0D0D0C0C0B0B0A0A090908070706060505040403030202010100><302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br0<212121212121202020202020201F1F1F1F1F1F1F1F1E1E1E1E1E1E1E1E1D1D1D1D1D1D1D1D1C1C1C1C1C1C1C1C1B1B1B1B1B1B1B1B1A1A1A1A1A1A1A1A><6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3A39383736353433323130>01 %_Br0<313130302F2E2D2C2C2B2A29282727262524232221><7F7F7E7D7C7C7B7A797877767574737271706F6E6D>01 %_Br0<42424241414040403F3F3E3E3E3D3D3C3C3C3B3B3A3A3A393939383837373736363535353434333333323231><ABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988878684838281807F>01 %_Br0<57575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575756565656565656565656565656565656565656565656565656565656565656565656565555555555555555555555555555555555545454545454545454545453535353535353535352525252525252525151515151515150505050504F4F4F4F4F4F4E4E4E4E4E4D4D4D4D4C4C4C4C4B4B4B4B4A4A4A4A49494948484848474747464646454545444443434342><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFDFDFDFCFCFCFCFCFCFCFBFBFBFBFBFBFAFAFAFAFAF9F9F9F9F8F8F8F8F7F7F7F7F6F6F6F5F5F5F4F4F4F3F3F2F2F2F1F1F0F0F0EFEFEEEEEDEDECEBEBEAEAE9E9E8E7E7E6E5E5E4E3E3E2E1E0E0DFDEDDDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C6C5C4C3C2C0BFBEBCBBBAB8B7B5B4B3B1B0AEACAB>01 %_Br[1 0 50 100 %_Bs0 0.1 0.19 0 1 50 70 %_Bs0 0.13 0.4264 0 1 50 59 %_Bs0 0.194 0.4998 0 1 54 45 %_Bs0 0.26 0.67 0 1 50 32 %_Bs0 0.34 1 0 1 83 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Black & White)(Black & White) 0 7 Bd[<00020406080A0C0E11121416181A1C1E2022242628292B2D2F31333436383A3B3D3F4042444547494A4C4D4F5152545557585A5B5D5E606163646567686A6B6C6E6F70727374767778797B7C7D7E8081828384868788898A8B8C8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFAFB0B1B2B3B4B4B5B6B7B7B8B9BABABBBCBDBDBEBFC0C0C1C2C2C3C4C4C5C6C6C7C7C8C9C9CACBCBCCCCCDCDCECFCFD0D0D1D1D2D2D3D3D4D4D5D5D6D6D7D7D8D8D9D9DADADBDBDCDCDCDDDDDEDEDEDFDFE0E0E0E1E1E2E2E2E3E3E3E4E4E5E5E5E6E6E6E7E7E7E8E8E8E8E9E9E9EAEAEAEAEBEBEBECECECECEDEDEDEDEEEEEEEEEFEFEFEFF0F0F0F0F0F1F1F1F1F1F2F2F2F2F2F3F3F3F3F3F4F4F4F4F4F4F5F5F5F5F5F5F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFBFBFBFBFBFBFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF>0 %_Br<91908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291>0 %_Br<9495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>0 %_Br<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F5051535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F9091929394>0 %_Br<FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFCFCFCFCFCFCFCFCFCFCFCFCFCFCFBFBFBFBFBFBFBFBFBFBFBFBFAFAFAFAFAFAFAFAFAFAF9F9F9F9F9F9F9F9F9F8F8F8F8F8F8F8F8F7F7F7F7F7F7F7F6F6F6F6F6F6F6F5F5F5F5F5F5F5F4F4F4F4F4F4F3F3F3F3F3F3F2F2F2F2F2F2F1F1F1F1F1F0F0F0F0F0EFEFEFEFEFEEEEEEEEEEEDEDEDEDECECECECECEBEBEBEBEAEAEAEAE9E9E9E9E9E8E8E8E8E7E7E7E6E6E6E6E5E5E5E5E4E4E4E4E3E3E3E2E2E2E2E1E1E1E0E0E0DFDFDFDEDEDEDEDDDDDDDCDCDCDBDBDBDADADAD9D9D9D8D8D8D7D7D7D6D6D5D5D5D4D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C6C6C6C5C5C4C4C3C3C2C2C2C1C1C0C0BFBFBEBEBDBDBCBCBBBBBABABAB9B9B8B8B7B7B6B6B5B4B4B3B3B2B2B1B1B0B0AFAFAEAEADADACABABAAAAA9A9A8A8A7A6A6A5A5A4A4A3A2A2A1A1A0A09F9E9E9D9D9C9B9B9A999998989796969594949393929191908F8F8E8D8D8C8B8B8A8989888787868585848382828180807F7E7E7D7C7B7B7A79787877767675747373727170706F6E6D6C6C6B6A696968676665656463626161605F5E5D5D5C5B5A5958585756555453535251504F4E4D4D4C4B4A49484746464544434241403F3E3E3D3C3B3A39383736353433323131302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A090706050403020100>0 %_Br[1 0 50 100 %_Bs0 0 13 80 %_Bs0.57 0 50 57 %_Bs1 0 50 48 %_Bs0.58 0 50 40 %_Bs0 0 50 28 %_Bs1 0 76 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Green & Blue)(Green & Blue) 0 2 Bd[<99999A9A9B9B9B9C9C9D9D9D9E9E9F9F9FA0A0A1A1A1A2A2A3A3A3A4A4A5A5A5A6A6A7A7A7A8A8A9A9A9AAAAABABABACACADADADAEAEAFAFAFB0B0B1B1B1B2B2B3B3B3B4B4B5B5B5B6B6B7B7B7B8B8B9B9B9BABABBBBBBBCBCBDBDBDBEBEBFBFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C5C6C6C7C7C7C8C8C9C9C9CACACBCBCBCCCCCDCDCDCECECFCFCFD0D0D1D1D1D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDDDDDDDEDEDFDFDFE0E0E1E1E1E2E2E3E3E3E4E4E5E5E5E6E6E7E7E7E8E8E9E9E9EAEAEBEBEBECECEDEDEDEEEEEFEFEFF0F0F1F1F1F2F2F3F3F3F4F4F5F5F5F6F6F7F7F7F8F8F9F9F9FAFAFBFBFBFCFCFDFDFDFEFEFFFF><000102020304050506070808090A0B0B0C0D0E0E0F101111121314141516171718191A1A1B1C1D1D1E1F20202122232324252626272829292A2B2C2C2D2E2F2F303132323334353536373838393A3B3B3C3D3E3E3F404141424344444546474748494A4A4B4C4D4D4E4F50505152535354555656575859595A5B5C5C5D5E5F5F606162626364656566676868696A6B6B6C6D6E6E6F707171727374747576777778797A7A7B7C7D7D7E7F80808182828384858586878888898A8B8B8C8D8E8E8F909191929394949596979798999A9A9B9C9D9D9E9FA0A0A1A2A3A3A4A5A6A6A7A8A9A9AAABACACADAEAFAFB0B1B2B2B3B4B5B5B6B7B8B8B9BABBBBBCBDBEBEBF><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br[1 0.75 0 0 1 50 100 %_Bs0.6 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (New Gradient 3)(New Gradient 3) 0 2 Bd[0<40403F3F3F3F3E3E3E3E3D3D3D3D3C3C3C3C3B3B3B3B3A3A3A3A393939393838383837373737363636363535353534343434333333333232323231313131303030302F2F2F2F2E2E2E2E2D2D2D2D2C2C2C2C2B2B2B2B2A2A2A2A292929292828282827272727262626262525252524242424232323232222222221212121202020201F1F1F1F1E1E1E1E1D1D1D1D1C1C1C1C1B1B1B1B1A1A1A1A1919191918181818171717171616161615151515141414141313131312121212111111111010100F0F0F0F0E0E0E0E0D0D0D0D0C0C0C0C0B0B0B0B0A0A0A0A090909090808080807070707060606060505050504040404030303030202020201010101000000><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>2 %_Br[1 0 50 100 %_Bs0 0.25 1 0 (Orange Yellow) 0 3 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Pink, Yellow, Green)(Pink, Yellow, Green) 0 3 Bd[<0000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010202020202020202020202020202020202020202020203030303030303030303030303030303030303030304040404040404040404040404040404040404040505050505050505050505050505050505050506060606060606060606060606060606060606070707070707070707070707070707070707080808080808080808080808080808080809090909090909090909090909090909090A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D><050506060606070708080809090A0A0A0B0B0C0C0D0D0E0E0F0F101011111212131314141515161717181819191A1A1B1C1C1D1D1E1F1F202021222223232425252626272828292A2A2B2C2C2D2D2E2F2F3031313233333435353637373839393A3B3B3C3D3E3E3F4040414242434445454647474849494A4B4C4C4D4E4F4F505151525354545556575758595A5A5B5C5C5D5E5F5F606162636364656666676869696A6B6C6C6D6E6F707071727373747576777778797A7B7B7C7D7E7F7F8081828383848586878788898A8B8B8C8D8E8F8F9091929394949596979898999A9B9C9D9D9E9FA0A1A2A2A3A4A5A6A7A7A8A9AAABACADADAEAFB0B1B2B2><CCCCCBCBCBCACACAC9C9C8C8C7C7C6C6C5C5C4C4C3C2C2C1C1C0C0BFBEBEBDBDBCBBBBBAB9B9B8B7B7B6B6B5B4B4B3B2B1B1B0AFAFAEADADACABAAAAA9A8A8A7A6A5A5A4A3A2A2A1A0A09F9E9D9C9C9B9A999998979696959493929291908F8E8E8D8C8B8A8A8988878686858483828181807F7E7D7C7C7B7A7978777776757473727171706F6E6D6C6B6A6A69686766656463636261605F5E5D5C5B5B5A59585756555453525151504F4E4D4C4B4A49484746464544434241403F3E3D3C3B3A39383837363534333231302F2E2D2C2B2A29282726252423222221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br<737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5B5A59585756555453525150504F4E4D4C4B4A4949484746454443434241403F3E3E3D3C3B3A3A393837363635343333323130302F2E2D2D2C2B2A2A29282827262525242323222121201F1F1E1D1D1C1C1B1A1A19181817171616151414131312121111100F0F0E0E0D0D0C0C0C0B0B0A0A090908080807070606060505050404040303030202020201010101010000000000><00000000000000000000000001010101010101010101010101010101010101010101010102020202020202020202020202020202020202020202020202020303030303030303030303030303030303030303030303030303030303030304040404040404040404040404040404040404040404040404040404040404040404040404050505050505050505050505050505050505050505050505050505050505050505050505050505050505><BFBFBFC0C0C0C0C0C0C0C0C0C1C1C1C1C1C1C1C1C1C2C2C2C2C2C2C2C2C2C2C3C3C3C3C3C3C3C3C3C3C4C4C4C4C4C4C4C4C4C4C5C5C5C5C5C5C5C5C5C5C5C6C6C6C6C6C6C6C6C6C6C6C6C7C7C7C7C7C7C7C7C7C7C7C7C8C8C8C8C8C8C8C8C8C8C8C8C8C9C9C9C9C9C9C9C9C9C9C9C9C9C9C9CACACACACACACACACACACACACACACACACBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC>01 %_Br[0.05 0.7 0 0 1 50 100 %_Bs0 0.02 0.8 0 1 57 36 %_Bs0.45 0 0.75 0 1 37 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Purple, Red & Yellow)(Purple, Red & Yellow) 0 3 Bd[0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A><CCCCCCCDCDCDCDCDCECECECECECFCFCFCFD0D0D0D0D0D1D1D1D1D1D2D2D2D2D2D3D3D3D3D3D4D4D4D4D5D5D5D5D5D6D6D6D6D6D7D7D7D7D7D8D8D8D8D8D9D9D9D9DADADADADADBDBDBDBDBDCDCDCDCDCDDDDDDDDDDDEDEDEDEDFDFDFDFDFE0E0E0E0E0E1E1E1E1E1E2E2E2E2E2E3E3E3E3E4E4E4E4E4E5E5E5E5E5E6E6E6E6E6E7E7E7E7E7E8E8E8E8E9E9E9E9E9EAEAEAEAEAEBEBEBEBEBECECECECECEDEDEDEDEEEEEEEEEEEFEFEFEFEFF0F0F0F0F0F1F1F1F1F1F2F2F2F2F3F3F3F3F3F4F4F4F4F4F5F5F5F5F5F6F6F6F6F6F7F7F7F7F8F8F8F8F8F9F9F9F9F9FAFAFAFAFAFBFBFBFBFBFCFCFCFCFDFDFDFDFDFEFEFEFEFEFFFFFF>01 %_Br<E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><E5E6E6E6E6E6E6E6E6E7E7E7E7E7E7E7E7E7E8E8E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBECECECECECECECECECEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFBFBFCFCFCFCFCFCFCFCFCFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFFFFFFFFFF><00010203040405060708090A0B0C0C0D0E0F10111213141415161718191A1B1C1D1D1E1F20212223242525262728292A2B2C2D2D2E2F30313233343535363738393A3B3C3D3D3E3F40414243444545464748494A4B4C4D4E4E4F50515253545556565758595A5B5C5D5E5E5F60616263646566666768696A6B6C6D6E6E6F70717273747576767778797A7B7C7D7E7F7F80818283848586878788898A8B8C8D8E8F8F90919293949596979798999A9B9C9D9E9F9FA0A1A2A3A4A5A6A7A7A8A9AAABACADAEAFAFB0B1B2B3B4B5B6B7B8B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C8C9CACBCC>01 %_Br[0 0.04 1 0 1 50 100 %_Bs0 1 0.8 0 1 50 50 %_Bs0.9 0.9 0 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Rainbow)(Rainbow) 0 6 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>1001 %_Br1<0708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>001 %_Br1<00000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010101010102020202020202020202020202020202020202020202020202020202020202020202020203030303030303030303030303030303030303030303030303030303030303030303030304040404040404040404040404040404040404040404040404040404040404040404040405050505050505050505050505050505050505050505050505050505050505050505050506060606060606060606060606060606060606060606060606060606060606060606060607070707070707070707070707070707070707070707><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>0101 %_Br0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>101 %_Br[0 1 0 0 1 50 100 %_Bs1 1 0 0 1 50 80 %_Bs1 0.0279 0 0 1 50 60 %_Bs1 0 1 0 1 50 40 %_Bs0 0 1 0 1 50 20 %_Bs0 1 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Steel Bar)(Steel Bar) 0 3 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>0 %_Br[0 0 50 100 %_Bs1 0 50 70 %_Bs0 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Orange Radial)(Yellow & Orange Radial) 1 2 Bd[0<0001010203040506060708090A0B0C0C0D0E0F10111213131415161718191A1B1C1D1D1E1F202122232425262728292A2B2B2C2D2E2F303132333435363738393A3B3C3D3E3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F60606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C><FFFFFFFFFEFEFEFEFEFEFEFDFDFDFDFDFDFCFCFCFCFCFCFBFBFBFBFBFBFAFAFAFAFAFAF9F9F9F9F9F9F8F8F8F8F8F8F7F7F7F7F7F7F6F6F6F6F6F6F5F5F5F5F5F5F4F4F4F4F4F3F3F3F3F3F3F2F2F2F2F2F2F1F1F1F1F1F0F0F0F0F0F0EFEFEFEFEFEFEEEEEEEEEEEDEDEDEDEDEDECECECECECEBEBEBEBEBEBEAEAEAEAEAE9E9E9E9E9E9E8E8E8E8E8E8E7E7E7E7E7E6E6E6E6E6E5>01 %_Br[0 0 1 0 1 52 19 %_Bs0 0.55 0.9 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Purple Radial)(Yellow & Purple Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 14 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc1 0.27 0 0.16 kPc0 0.7 1 0 kPc0.46 0 1 0 kPc1 1 0 0 kPcBb2 (Pink, Yellow, Green) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.17 1 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.34 1 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Purple Radial) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPcBb2 (Rainbow) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPcBb2 (Steel Bar) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPcBb2 (Purple, Red & Yellow) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPcBb2 (Green & Blue) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPcBb0 0 0 0 Bh2 (Yellow & Orange Radial) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A1 Ap0 O0.46 0 1 0 k800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR588.3629 588.0373 m128.5061 588.0373 L128.5061 534.8377 L588.6666 534.8377 LF0 Ap379.3333 4716 m379.3333 -3924 L(N) *-4014 288.25 m4626 288.25 L(N) *-4014 300.5 m4626 300.5 L(N) *400 4716 m400 -3924 L(N) *-4014 402 m4626 402 L(N) **u0 O0 0.7 1 0 k158.9308 552.2519 m158.9654 544.8895 L158.9805 542.9266 158.9214 541.2967 158.8045 539.3676 c158.8842 539.3676 L159.4718 541.2074 160.2458 542.9495 160.9854 544.6972 c164.3995 552.2519 L168.5659 552.2519 L168.9922 544.9437 L169.0758 542.903 169.1356 541.2321 169.0555 539.3676 c169.1371 539.3676 L169.7015 541.293 170.3129 543.0042 171.042 545.0203 c173.9917 552.2519 L179.1357 552.2519 L170.711 534.9098 L165.9123 534.9098 L165.4156 540.9439 L165.3027 542.7528 165.2747 544.4117 165.2784 546.482 c165.2005 546.482 L164.2788 544.0364 163.8642 542.7585 163.1471 541.1744 c160.2028 534.9098 L155.3986 534.9098 L153.7837 552.2519 L158.9308 552.2519 lf*U*u184.9087 552.2519 m184.9433 544.8895 L184.9584 542.9266 184.8993 541.2967 184.7824 539.3676 c184.8621 539.3676 L185.4497 541.2074 186.2238 542.9495 186.9634 544.6972 c190.3775 552.2519 L194.5438 552.2519 L194.9702 544.9437 L195.0538 542.903 195.1136 541.2321 195.0335 539.3676 c195.1151 539.3676 L195.6794 541.293 196.2908 543.0042 197.0199 545.0203 c199.9697 552.2519 L205.1136 552.2519 L196.6889 534.9098 L191.8903 534.9098 L191.3936 540.9439 L191.2807 542.7528 191.2526 544.4117 191.2563 546.482 c191.1785 546.482 L190.2567 544.0364 189.8421 542.7585 189.125 541.1744 c186.1808 534.9098 L181.3765 534.9098 L179.7617 552.2519 L184.9087 552.2519 lf*U*u210.8867 552.2519 m210.9212 544.8895 L210.9364 542.9266 210.8772 541.2967 210.7603 539.3676 c210.8401 539.3676 L211.4276 541.2074 212.2017 542.9495 212.9413 544.6972 c216.3554 552.2519 L220.5218 552.2519 L220.9481 544.9437 L221.0317 542.903 221.0915 541.2321 221.0114 539.3676 c221.093 539.3676 L221.6574 541.293 222.2688 543.0042 222.9978 545.0203 c225.9476 552.2519 L231.0916 552.2519 L222.6669 534.9098 L217.8682 534.9098 L217.3715 540.9439 L217.2586 542.7528 217.2305 544.4117 217.2343 546.482 c217.1564 546.482 L216.2346 544.0364 215.82 542.7585 215.1029 541.1744 c212.1587 534.9098 L207.3544 534.9098 L205.7396 552.2519 L210.8867 552.2519 lf*U*u232.1954 534.562 m230.4813 534.562 229.3434 535.8034 229.3434 537.5092 c229.3434 539.4572 230.7547 541.1089 232.7926 541.1089 c234.5236 541.1089 235.7219 539.8782 235.7219 538.0811 c235.7219 536.0139 234.2571 534.562 232.2308 534.562 C232.1954 534.562 lf*U*u238.3583 534.9098 m240.3137 545.2299 L240.7994 547.8394 241.02 550.7581 241.2009 552.2519 c245.6172 552.2519 L245.5257 551.0822 245.4343 549.9106 245.2999 548.6978 c245.4113 548.6978 L246.6349 551.0018 248.5601 552.6417 250.9357 552.6417 c251.2587 552.6417 251.5902 552.6291 251.888 552.6039 c250.8934 547.6299 L250.6706 547.6481 250.3876 547.6607 250.0892 547.6607 c246.8424 547.6607 245.3106 544.7635 244.6722 541.3541 c243.4593 534.9098 L238.3583 534.9098 lf*U*u259.3044 534.5201 m254.8925 534.5201 251.9485 537.3728 251.9485 541.6899 c251.9485 547.6842 256.1461 552.6417 262.2994 552.6417 c266.9594 552.6417 269.6539 549.4528 269.6539 545.494 c269.6539 539.1723 265.3044 534.5201 259.3398 534.5201 C259.3044 534.5201 lf1 D259.9845 538.4129 m262.7535 538.4129 264.3385 542.5053 264.3385 545.4526 c264.3385 547.0649 263.6389 548.7489 261.6109 548.7489 c258.6684 548.7489 257.186 544.4758 257.193 541.793 c257.193 539.7646 258.2047 538.4129 259.9491 538.4129 C259.9845 538.4129 lf*U*u0 D271.8659 539.4683 m272.8521 538.976 274.7101 538.2616 276.3851 538.2685 c277.8238 538.2755 278.5698 538.9763 278.5698 539.8436 c278.5698 540.693 278.0107 541.2799 276.4104 542.0658 c274.4142 543.0673 272.7425 544.5178 272.7425 546.6681 c272.7425 550.261 275.9004 552.6417 280.3609 552.6417 c282.382 552.6417 283.9643 552.2254 284.8134 551.7481 c283.6001 548.1417 L282.8717 548.4801 281.6542 548.8969 280.1362 548.8969 c278.7849 548.8969 277.8835 548.3123 277.8835 547.3772 c277.8835 546.6559 278.5896 546.0673 279.9921 545.4073 c281.8793 544.4653 283.8701 543.0563 283.8701 540.6511 c283.8701 536.6826 280.5003 534.4959 275.91 534.5378 c273.7213 534.5797 271.6429 535.1396 270.6228 535.8941 C271.8659 539.4683 lf*U*u285.9561 534.9098 m290.7201 560.0657 L295.7933 560.0657 L292.9306 545.0152 L293.0014 545.0152 L293.5361 545.685 294.0733 546.3647 294.5614 546.9709 c299.001 552.2519 L305.29 552.2519 L297.9127 545.0955 L302.7346 534.9098 L297.0415 534.9098 L293.9958 542.3246 L292.0854 540.4853 L291.0273 534.9098 L285.9561 534.9098 lf*U*u307.7416 534.562 m306.0275 534.562 304.8896 535.8034 304.8896 537.5092 c304.8896 539.4572 306.3009 541.1089 308.3388 541.1089 c310.0698 541.1089 311.2681 539.8782 311.2681 538.0811 c311.2681 536.0139 309.8033 534.562 307.777 534.562 C307.7416 534.562 lf*U*u313.9045 534.9098 m317.199 552.2519 L322.3001 552.2519 L319.0055 534.9098 L313.9045 534.9098 lf320.3847 554.5127 m318.8914 554.5127 317.7811 555.5701 317.7849 557.1739 c317.7905 558.9993 319.2305 560.256 320.9055 560.256 c322.4972 560.256 323.627 559.2145 323.627 557.586 c323.6158 555.647 322.1469 554.5127 320.4201 554.5127 C320.3847 554.5127 lf*U*u337.7953 535.9051 m335.7785 534.8879 333.2487 534.5378 331.318 534.5378 c326.3635 534.5378 323.8224 537.342 323.8224 541.8689 c323.8224 547.1367 327.6508 552.6417 333.91 552.6417 c337.4294 552.6417 339.9418 550.6637 339.9488 547.438 c339.9488 543.0369 335.6472 541.4242 328.708 541.6087 c328.7203 541.1122 328.8992 540.3262 329.2578 539.8257 c329.9296 538.9509 331.0824 538.499 332.5733 538.499 c334.4375 538.499 336.0615 538.9232 337.4358 539.5957 C337.7953 535.9051 lf1 D335.1597 547.4701 m335.1597 548.2994 334.4393 548.9039 333.2843 548.9039 c330.9181 548.9039 329.5438 546.9408 329.2038 545.3389 c333.1643 545.2979 335.1597 545.8486 335.1597 547.4346 C335.1597 547.4701 lf*U*u0 D356.9554 534.676 m354.0748 534.676 352.9436 536.8788 352.9436 539.6516 c352.9436 544.0052 355.1687 548.9597 359.4196 548.9597 c362.3811 548.9597 363.3993 546.6765 363.3993 544.2226 c363.3993 539.9074 361.3036 534.676 356.9767 534.676 C356.9554 534.676 lf1 D357.3031 537.1077 m359.406 537.1077 360.353 542.3697 360.353 544.1931 c360.353 545.1164 360.2123 546.5279 359.044 546.5279 c357.0014 546.5279 355.939 541.569 355.939 539.5521 c355.939 538.5149 356.098 537.1077 357.2819 537.1077 C357.3031 537.1077 lf*U*u0 D369.5498 545.8468 m369.5072 545.8468 L366.7894 544.6504 L366.6947 547.0511 L370.5362 548.7259 L373.039 548.7259 L370.4296 534.9098 L367.4817 534.9098 L369.5498 545.8468 lf*U*u384.4638 534.9098 m385.1044 538.2617 L379.2078 538.2617 L379.5985 540.3119 L386.1763 548.7259 L389.9392 548.7259 L388.4064 540.6118 L390.0309 540.6118 L389.5938 538.2617 L387.9692 538.2617 L387.3286 534.9098 L384.4638 534.9098 lf1 D385.5415 540.6118 m386.1768 543.6039 L386.3767 544.4838 386.6333 545.4315 386.8366 546.2963 c386.7561 546.2997 L386.1428 545.3571 385.6011 544.5016 384.9386 543.587 c382.6627 540.6544 L382.6459 540.6118 L385.5415 540.6118 lf*U*u0 D391.8798 537.2377 m392.2381 537.1989 392.5971 537.2182 393.1798 537.2437 c394.1335 537.3157 395.0971 537.6041 395.8961 538.1004 c396.9141 538.7306 397.6868 539.6141 398.1338 540.6444 c398.0929 540.6695 L397.4325 539.9913 396.4008 539.6797 395.4848 539.6797 c393.2906 539.6797 391.7881 541.1823 391.7881 543.4193 c391.7881 546.4151 394.279 548.9597 397.4109 548.9597 c400.4556 548.9597 401.8847 546.8829 401.8805 544.1433 c401.868 540.8599 400.2109 538.0539 398.3657 536.5829 c396.9437 535.4435 394.9786 534.8111 393.1097 534.715 c392.3088 534.6842 391.9025 534.6989 391.5053 534.7263 C391.8798 537.2377 lf1 D397.1261 546.6042 m395.9125 546.6042 394.922 545.18 394.922 543.7965 c394.922 542.6726 395.5757 541.9505 396.5313 541.9505 c397.3638 541.9505 398.0306 542.3827 398.3812 542.8643 c398.5023 543.024 398.6117 543.2298 398.6816 543.5159 c398.7666 543.7982 398.8033 544.257 398.8033 544.6273 c398.8033 545.7345 398.2788 546.6042 397.1473 546.6042 C397.1261 546.6042 lf*U*u0 D403.0759 538.0188 m403.6383 537.722 404.7334 537.2527 406.1131 537.2527 c407.8242 537.2527 408.8471 538.1121 408.8471 539.2174 c408.8471 540.4572 407.8238 541.0635 406.0244 541.0624 c405.481 541.0624 L405.9295 543.3901 L406.4179 543.3901 L407.853 543.3924 409.483 543.9662 409.483 545.2054 c409.483 545.889 408.9648 546.3997 407.788 546.3997 c406.6097 546.3997 405.5795 546.0836 404.9379 545.7216 c404.5137 548.0172 L405.5211 548.5787 407.0038 548.9597 408.3921 548.9597 c410.7109 548.9597 412.7243 547.8888 412.7243 545.712 c412.7243 544.0035 411.3688 542.746 409.6448 542.3153 c409.628 542.2728 L411.0699 541.9622 412.0373 540.8192 412.0373 539.2387 c412.0373 536.3314 409.0808 534.676 406.0563 534.676 c404.2965 534.676 402.7575 535.1036 402.1452 535.6173 C403.0759 538.0188 lf*U*u418.3213 534.676 m415.4407 534.676 414.3094 536.8788 414.3094 539.6516 c414.3094 544.0052 416.5346 548.9597 420.7855 548.9597 c423.7469 548.9597 424.7651 546.6765 424.7651 544.2226 c424.7651 539.9074 422.6694 534.676 418.3425 534.676 C418.3213 534.676 lf1 D418.669 537.1077 m420.7719 537.1077 421.7188 542.3697 421.7188 544.1931 c421.7188 545.1164 421.5781 546.5279 420.4099 546.5279 c418.3673 546.5279 417.3048 541.569 417.3048 539.5521 c417.3048 538.5149 417.4639 537.1077 418.6477 537.1077 C418.669 537.1077 lf*U*u0 D436.8967 548.7259 m436.5082 546.6923 L433.9875 542.773 431.4582 538.8492 428.9154 534.9098 c425.5248 534.9098 L428.0369 538.6338 430.5389 542.3513 433.0249 546.0678 c433.0235 546.1136 L427.0191 546.1136 L427.5191 548.7259 L436.8967 548.7259 lf*U*u437.8458 537.2377 m438.2041 537.1989 438.5631 537.2182 439.1458 537.2437 c440.0995 537.3157 441.0631 537.6041 441.8621 538.1004 c442.8801 538.7306 443.6528 539.6141 444.0998 540.6444 c444.0589 540.6695 L443.3985 539.9913 442.3668 539.6797 441.4508 539.6797 c439.2566 539.6797 437.7541 541.1823 437.7541 543.4193 c437.7541 546.4151 440.245 548.9597 443.3769 548.9597 c446.4216 548.9597 447.8507 546.8829 447.8465 544.1433 c447.834 540.8599 446.1769 538.0539 444.3317 536.5829 c442.9097 535.4435 440.9446 534.8111 439.0757 534.715 c438.2748 534.6842 437.8685 534.6989 437.4713 534.7263 C437.8458 537.2377 lf1 D443.0921 546.6042 m441.8785 546.6042 440.888 545.18 440.888 543.7965 c440.888 542.6726 441.5417 541.9505 442.4973 541.9505 c443.3298 541.9505 443.9966 542.3827 444.3472 542.8643 c444.4683 543.024 444.5777 543.2298 444.6476 543.5159 c444.7326 543.7982 444.7693 544.257 444.7693 544.6273 c444.7693 545.7345 444.2448 546.6042 443.1133 546.6042 C443.0921 546.6042 lf*U*u0 D452.7958 534.676 m449.9152 534.676 448.7839 536.8788 448.7839 539.6516 c448.7839 544.0052 451.0091 548.9597 455.26 548.9597 c458.2214 548.9597 459.2396 546.6765 459.2396 544.2226 c459.2396 539.9074 457.1439 534.676 452.817 534.676 C452.7958 534.676 lf1 D453.1435 537.1077 m455.2464 537.1077 456.1933 542.3697 456.1933 544.1931 c456.1933 545.1164 456.0526 546.5279 454.8844 546.5279 c452.8418 546.5279 451.7793 541.569 451.7793 539.5521 c451.7793 538.5149 451.9384 537.1077 453.1222 537.1077 C453.1435 537.1077 lf*U*u0 0.17 1 0 k0 D159.9308 552.1686 m159.9654 544.8062 L159.9805 542.8433 159.9214 541.2134 159.8045 539.2843 c159.8842 539.2843 L160.4718 541.1241 161.2458 542.8662 161.9854 544.6139 c165.3995 552.1686 L169.5659 552.1686 L169.9922 544.8604 L170.0758 542.8197 170.1356 541.1488 170.0555 539.2843 c170.1371 539.2843 L170.7015 541.2097 171.3129 542.9209 172.042 544.937 c174.9917 552.1686 L180.1357 552.1686 L171.711 534.8265 L166.9123 534.8265 L166.4156 540.8606 L166.3027 542.6695 166.2747 544.3284 166.2784 546.3987 c166.2005 546.3987 L165.2788 543.9531 164.8642 542.6752 164.1471 541.0911 c161.2028 534.8265 L156.3986 534.8265 L154.7837 552.1686 L159.9308 552.1686 lf*U*u185.9087 552.1686 m185.9433 544.8062 L185.9584 542.8433 185.8993 541.2134 185.7824 539.2843 c185.8621 539.2843 L186.4497 541.1241 187.2238 542.8662 187.9634 544.6139 c191.3775 552.1686 L195.5438 552.1686 L195.9702 544.8604 L196.0538 542.8197 196.1136 541.1488 196.0335 539.2843 c196.1151 539.2843 L196.6794 541.2097 197.2908 542.9209 198.0199 544.937 c200.9697 552.1686 L206.1136 552.1686 L197.6889 534.8265 L192.8903 534.8265 L192.3936 540.8606 L192.2807 542.6695 192.2526 544.3284 192.2563 546.3987 c192.1785 546.3987 L191.2567 543.9531 190.8421 542.6752 190.125 541.0911 c187.1808 534.8265 L182.3765 534.8265 L180.7617 552.1686 L185.9087 552.1686 lf*U*u211.8867 552.1686 m211.9212 544.8062 L211.9364 542.8433 211.8772 541.2134 211.7603 539.2843 c211.8401 539.2843 L212.4276 541.1241 213.2017 542.8662 213.9413 544.6139 c217.3554 552.1686 L221.5218 552.1686 L221.9481 544.8604 L222.0317 542.8197 222.0915 541.1488 222.0114 539.2843 c222.093 539.2843 L222.6574 541.2097 223.2688 542.9209 223.9978 544.937 c226.9476 552.1686 L232.0916 552.1686 L223.6669 534.8265 L218.8682 534.8265 L218.3715 540.8606 L218.2586 542.6695 218.2305 544.3284 218.2343 546.3987 c218.1564 546.3987 L217.2346 543.9531 216.82 542.6752 216.1029 541.0911 c213.1587 534.8265 L208.3544 534.8265 L206.7396 552.1686 L211.8867 552.1686 lf*U*u233.1954 534.4787 m231.4813 534.4787 230.3434 535.7201 230.3434 537.4259 c230.3434 539.3739 231.7547 541.0256 233.7926 541.0256 c235.5236 541.0256 236.7219 539.7949 236.7219 537.9978 c236.7219 535.9306 235.2571 534.4787 233.2308 534.4787 C233.1954 534.4787 lf*U*u239.3583 534.8265 m241.3137 545.1466 L241.7994 547.7561 242.02 550.6748 242.2009 552.1686 c246.6172 552.1686 L246.5257 550.9989 246.4343 549.8273 246.2999 548.6145 c246.4113 548.6145 L247.6349 550.9185 249.5601 552.5584 251.9357 552.5584 c252.2587 552.5584 252.5902 552.5458 252.888 552.5206 c251.8934 547.5466 L251.6706 547.5648 251.3876 547.5774 251.0892 547.5774 c247.8424 547.5774 246.3106 544.6802 245.6722 541.2708 c244.4593 534.8265 L239.3583 534.8265 lf*U*u260.3044 534.4368 m255.8925 534.4368 252.9485 537.2895 252.9485 541.6066 c252.9485 547.6009 257.1461 552.5584 263.2994 552.5584 c267.9594 552.5584 270.6539 549.3695 270.6539 545.4107 c270.6539 539.089 266.3044 534.4368 260.3398 534.4368 C260.3044 534.4368 lf1 D260.9845 538.3296 m263.7535 538.3296 265.3385 542.422 265.3385 545.3693 c265.3385 546.9816 264.6389 548.6656 262.6109 548.6656 c259.6684 548.6656 258.186 544.3925 258.193 541.7097 c258.193 539.6813 259.2047 538.3296 260.9491 538.3296 C260.9845 538.3296 lf*U*u0 D272.8659 539.385 m273.8521 538.8927 275.7101 538.1783 277.3851 538.1852 c278.8238 538.1922 279.5698 538.893 279.5698 539.7603 c279.5698 540.6097 279.0107 541.1966 277.4104 541.9825 c275.4142 542.984 273.7425 544.4345 273.7425 546.5848 c273.7425 550.1777 276.9004 552.5584 281.3609 552.5584 c283.382 552.5584 284.9643 552.1421 285.8134 551.6648 c284.6001 548.0584 L283.8717 548.3968 282.6542 548.8136 281.1362 548.8136 c279.7849 548.8136 278.8835 548.229 278.8835 547.2939 c278.8835 546.5726 279.5896 545.984 280.9921 545.324 c282.8793 544.382 284.8701 542.973 284.8701 540.5678 c284.8701 536.5993 281.5003 534.4126 276.91 534.4545 c274.7213 534.4964 272.6429 535.0563 271.6228 535.8108 C272.8659 539.385 lf*U*u286.9561 534.8265 m291.7201 559.9824 L296.7933 559.9824 L293.9306 544.9319 L294.0014 544.9319 L294.5361 545.6017 295.0733 546.2814 295.5614 546.8876 c300.001 552.1686 L306.29 552.1686 L298.9127 545.0122 L303.7346 534.8265 L298.0415 534.8265 L294.9958 542.2413 L293.0854 540.402 L292.0273 534.8265 L286.9561 534.8265 lf*U*u308.7416 534.4787 m307.0275 534.4787 305.8896 535.7201 305.8896 537.4259 c305.8896 539.3739 307.3009 541.0256 309.3388 541.0256 c311.0698 541.0256 312.2681 539.7949 312.2681 537.9978 c312.2681 535.9306 310.8033 534.4787 308.777 534.4787 C308.7416 534.4787 lf*U*u314.9045 534.8265 m318.199 552.1686 L323.3001 552.1686 L320.0055 534.8265 L314.9045 534.8265 lf321.3847 554.4294 m319.8914 554.4294 318.7811 555.4868 318.7849 557.0906 c318.7905 558.916 320.2305 560.1727 321.9055 560.1727 c323.4972 560.1727 324.627 559.1312 324.627 557.5027 c324.6158 555.5637 323.1469 554.4294 321.4201 554.4294 C321.3847 554.4294 lf*U*u338.7953 535.8218 m336.7785 534.8046 334.2487 534.4545 332.318 534.4545 c327.3635 534.4545 324.8224 537.2587 324.8224 541.7856 c324.8224 547.0534 328.6508 552.5584 334.91 552.5584 c338.4294 552.5584 340.9418 550.5804 340.9488 547.3547 c340.9488 542.9536 336.6472 541.3409 329.708 541.5254 c329.7203 541.0289 329.8992 540.2429 330.2578 539.7424 c330.9296 538.8676 332.0824 538.4158 333.5733 538.4158 c335.4375 538.4158 337.0615 538.8399 338.4358 539.5124 C338.7953 535.8218 lf1 D336.1597 547.3868 m336.1597 548.2161 335.4393 548.8206 334.2843 548.8206 c331.9181 548.8206 330.5438 546.8575 330.2038 545.2556 c334.1643 545.2146 336.1597 545.7653 336.1597 547.3513 C336.1597 547.3868 lf*U*u0 D357.9554 534.5927 m355.0748 534.5927 353.9436 536.7955 353.9436 539.5683 c353.9436 543.9219 356.1687 548.8764 360.4196 548.8764 c363.3811 548.8764 364.3993 546.5932 364.3993 544.1393 c364.3993 539.8241 362.3036 534.5927 357.9767 534.5927 C357.9554 534.5927 lf1 D358.3031 537.0244 m360.406 537.0244 361.353 542.2864 361.353 544.1098 c361.353 545.0331 361.2123 546.4447 360.044 546.4447 c358.0014 546.4447 356.939 541.4857 356.939 539.4688 c356.939 538.4316 357.098 537.0244 358.2819 537.0244 C358.3031 537.0244 lf*U*u0 D370.5498 545.7635 m370.5072 545.7635 L367.7894 544.5671 L367.6947 546.9678 L371.5362 548.6426 L374.039 548.6426 L371.4296 534.8265 L368.4817 534.8265 L370.5498 545.7635 lf*U*u385.4638 534.8265 m386.1044 538.1784 L380.2078 538.1784 L380.5985 540.2286 L387.1763 548.6426 L390.9392 548.6426 L389.4064 540.5285 L391.0309 540.5285 L390.5938 538.1784 L388.9692 538.1784 L388.3286 534.8265 L385.4638 534.8265 lf1 D386.5415 540.5285 m387.1768 543.5206 L387.3767 544.4005 387.6333 545.3482 387.8366 546.213 c387.7561 546.2164 L387.1428 545.2738 386.6011 544.4183 385.9386 543.5037 c383.6627 540.5711 L383.6459 540.5285 L386.5415 540.5285 lf*U*u0 D392.8798 537.1544 m393.2381 537.1156 393.5971 537.1349 394.1798 537.1604 c395.1335 537.2324 396.0971 537.5208 396.8961 538.0171 c397.9141 538.6473 398.6868 539.5308 399.1338 540.5611 c399.0929 540.5862 L398.4325 539.908 397.4008 539.5964 396.4848 539.5964 c394.2906 539.5964 392.7881 541.099 392.7881 543.336 c392.7881 546.3318 395.279 548.8764 398.4109 548.8764 c401.4556 548.8764 402.8847 546.7996 402.8805 544.06 c402.868 540.7766 401.2109 537.9706 399.3657 536.4996 c397.9437 535.3602 395.9786 534.7278 394.1097 534.6317 c393.3088 534.6009 392.9025 534.6156 392.5053 534.643 C392.8798 537.1544 lf1 D398.1261 546.5209 m396.9125 546.5209 395.922 545.0968 395.922 543.7132 c395.922 542.5893 396.5757 541.8672 397.5313 541.8672 c398.3638 541.8672 399.0306 542.2994 399.3812 542.781 c399.5023 542.9407 399.6117 543.1465 399.6816 543.4326 c399.7666 543.7149 399.8033 544.1737 399.8033 544.544 c399.8033 545.6512 399.2788 546.5209 398.1473 546.5209 C398.1261 546.5209 lf*U*u0 D404.0759 537.9355 m404.6383 537.6387 405.7334 537.1694 407.1131 537.1694 c408.8242 537.1694 409.8471 538.0288 409.8471 539.1341 c409.8471 540.3739 408.8238 540.9802 407.0244 540.9791 c406.481 540.9791 L406.9295 543.3068 L407.4179 543.3068 L408.853 543.3091 410.483 543.8829 410.483 545.1221 c410.483 545.8057 409.9648 546.3164 408.788 546.3164 c407.6097 546.3164 406.5795 546.0003 405.9379 545.6383 c405.5137 547.9339 L406.5211 548.4954 408.0038 548.8764 409.3921 548.8764 c411.7109 548.8764 413.7243 547.8055 413.7243 545.6287 c413.7243 543.9202 412.3688 542.6627 410.6448 542.232 c410.628 542.1895 L412.0699 541.8789 413.0373 540.7359 413.0373 539.1554 c413.0373 536.2481 410.0808 534.5927 407.0563 534.5927 c405.2965 534.5927 403.7575 535.0204 403.1452 535.534 C404.0759 537.9355 lf*U*u419.3213 534.5927 m416.4407 534.5927 415.3094 536.7955 415.3094 539.5683 c415.3094 543.9219 417.5346 548.8764 421.7855 548.8764 c424.7469 548.8764 425.7651 546.5932 425.7651 544.1393 c425.7651 539.8241 423.6694 534.5927 419.3425 534.5927 C419.3213 534.5927 lf1 D419.669 537.0244 m421.7719 537.0244 422.7188 542.2864 422.7188 544.1098 c422.7188 545.0331 422.5781 546.4447 421.4099 546.4447 c419.3673 546.4447 418.3048 541.4857 418.3048 539.4688 c418.3048 538.4316 418.4639 537.0244 419.6477 537.0244 C419.669 537.0244 lf*U*u0 D437.8967 548.6426 m437.5082 546.609 L434.9875 542.6897 432.4582 538.7659 429.9154 534.8265 c426.5248 534.8265 L429.0369 538.5505 431.5389 542.268 434.0249 545.9845 c434.0235 546.0303 L428.0191 546.0303 L428.5191 548.6426 L437.8967 548.6426 lf*U*u438.8458 537.1544 m439.2041 537.1156 439.5631 537.1349 440.1458 537.1604 c441.0995 537.2324 442.0631 537.5208 442.8621 538.0171 c443.8801 538.6473 444.6528 539.5308 445.0998 540.5611 c445.0589 540.5862 L444.3985 539.908 443.3668 539.5964 442.4508 539.5964 c440.2566 539.5964 438.7541 541.099 438.7541 543.336 c438.7541 546.3318 441.245 548.8764 444.3769 548.8764 c447.4216 548.8764 448.8507 546.7996 448.8465 544.06 c448.834 540.7766 447.1769 537.9706 445.3317 536.4996 c443.9097 535.3602 441.9446 534.7278 440.0757 534.6317 c439.2748 534.6009 438.8685 534.6156 438.4713 534.643 C438.8458 537.1544 lf1 D444.0921 546.5209 m442.8785 546.5209 441.888 545.0968 441.888 543.7132 c441.888 542.5893 442.5417 541.8672 443.4973 541.8672 c444.3298 541.8672 444.9966 542.2994 445.3472 542.781 c445.4683 542.9407 445.5777 543.1465 445.6476 543.4326 c445.7326 543.7149 445.7693 544.1737 445.7693 544.544 c445.7693 545.6512 445.2448 546.5209 444.1133 546.5209 C444.0921 546.5209 lf*U*u0 D453.7958 534.5927 m450.9152 534.5927 449.7839 536.7955 449.7839 539.5683 c449.7839 543.9219 452.0091 548.8764 456.26 548.8764 c459.2214 548.8764 460.2396 546.5932 460.2396 544.1393 c460.2396 539.8241 458.1439 534.5927 453.817 534.5927 C453.7958 534.5927 lf1 D454.1435 537.0244 m456.2464 537.0244 457.1933 542.2864 457.1933 544.1098 c457.1933 545.0331 457.0526 546.4447 455.8844 546.4447 c453.8418 546.4447 452.7793 541.4857 452.7793 539.4688 c452.7793 538.4316 452.9384 537.0244 454.1222 537.0244 C454.1435 537.0244 lf*ULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_screens_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF